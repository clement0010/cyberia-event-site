{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","webpack:///./src/generated/graphql.ts","webpack:///../../../src/mixins/delayable/index.ts","webpack:///../../../src/mixins/stackable/index.ts","webpack:///../../../src/mixins/loadable/index.ts","webpack:///./node_modules/core-js/modules/es.object.is.js","webpack:///../../../src/mixins/validatable/index.ts","webpack:///../../../src/components/VThemeProvider/VThemeProvider.ts","webpack:///../../../src/mixins/activatable/index.ts","webpack:///../../../src/mixins/detachable/index.ts","webpack:///../../../src/components/VCounter/VCounter.ts","webpack:///../../../src/components/VCounter/index.ts","webpack:///../../../src/mixins/intersectable/index.ts","webpack:///../../../src/components/VTextField/VTextField.ts","webpack:///../../../src/components/VLabel/VLabel.ts","webpack:///../../../src/components/VLabel/index.ts","webpack:///../../../src/components/VMessages/VMessages.ts","webpack:///../../../src/components/VMessages/index.ts","webpack:///../../../src/components/VInput/VInput.ts","webpack:///../../../src/components/VInput/index.ts","webpack:///../../../src/mixins/returnable/index.ts","webpack:///./src/components/atoms/LoaderSpin.vue?4404","webpack:///./src/components/atoms/LoaderSpin.vue"],"names":["_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","Contest_Constraint","Contest_Select_Column","Contest_Update_Column","Control_Constraint","Control_Select_Column","Control_Update_Column","Games_Constraint","Games_Select_Column","Games_Update_Column","Leaderboard_Public_Select_Column","Order_By","Participants_Constraint","Participants_Select_Column","Participants_Update_Column","Roles_Constraint","Roles_Enum","Roles_Select_Column","Roles_Update_Column","Status_Constraint","Status_Enum","Status_Select_Column","Status_Update_Column","Teams_Constraint","Teams_Scores_Constraint","Teams_Scores_Select_Column","Teams_Scores_Update_Column","Teams_Select_Column","Teams_Update_Column","Users_Constraint","Users_Select_Column","Users_Update_Column","UpdateParticipantDetailsDocument","useUpdateParticipantDetailsMutation","options","UpdateGameScoreDocument","useUpdateGameScoreMutation","SubmitContestDocument","useSubmitContestMutation","SubmitContestVoteDocument","useSubmitContestVoteMutation","UpdateParticipantsScoreDocument","useUpdateParticipantsScoreMutation","AddScoreToTeamDocument","useAddScoreToTeamMutation","UpdateLeadershipboardStateDocument","useUpdateLeadershipboardStateMutation","UpdateContestStateDocument","useUpdateContestStateMutation","EmergencyMeetingVoteDocument","useEmergencyMeetingVoteMutation","UpdateParticipantsPicometerDocument","useUpdateParticipantsPicometerMutation","UpdateParticipantsViewfinderDocument","useUpdateParticipantsViewfinderMutation","BuyPicometerDocument","useBuyPicometerMutation","BuyViewfinderDocument","useBuyViewfinderMutation","KillParticipantsDocument","useKillParticipantsMutation","EmergencyMeetingControlDocument","useEmergencyMeetingControlMutation","GetOneParticipantDetailsDocument","useGetOneParticipantDetailsQuery","variables","GetContestSubmissionDocument","useGetContestSubmissionQuery","GetParticipantVotingDetailsDocument","useGetParticipantVotingDetailsQuery","GetControlStateDocument","useGetControlStateQuery","GetArtifactsDetailsDocument","useGetArtifactsDetailsQuery","SubscribePublicLeaderboardDocument","useSubscribePublicLeaderboardSubscription","SubscibeToAllGamesDocument","useSubscibeToAllGamesSubscription","GetParticipantsScoreDocument","useGetParticipantsScoreSubscription","EmergencyMeetingDetailsDocument","useEmergencyMeetingDetailsSubscription","GetEmergencyVotingStatusDocument","useGetEmergencyVotingStatusSubscription","GetParticipantsPicometerDetailsDocument","useGetParticipantsPicometerDetailsSubscription","GetParticipantsViewfinderDetailsDocument","useGetParticipantsViewfinderDetailsSubscription","GetEmergencyMeetingStatusDocument","useGetEmergencyMeetingStatusSubscription","ContestSubmissionLiveResultDocument","useContestSubmissionLiveResultSubscription","GetEmergencyMeetingResultDocument","useGetEmergencyMeetingResultSubscription","name","props","openDelay","type","Number","default","closeDelay","data","openTimeout","closeTimeout","undefined","methods","clearDelay","clearTimeout","this","runDelay","delay","parseInt","setTimeout","cb","open","close","stackElement","stackExclude","stackMinZIndex","isActive","computed","activeZIndex","window","content","$refs","index","getMaxZIndex","exclude","base","zis","activeElements","document","Math","loading","Boolean","loaderHeight","genProgress","$slots","progress","$createElement","absolute","color","height","indeterminate","$","is","target","stat","baseMixins","disabled","error","errorCount","errorMessages","String","messages","readonly","rules","success","successMessages","validateOnBlur","required","errorBucket","hasColor","hasFocused","hasInput","isFocused","isResetting","lazyValue","valid","computedColor","isDark","hasError","internalErrorMessages","length","hasSuccess","internalSuccessMessages","externalError","hasMessages","validationTarget","hasState","shouldValidate","genInternalMessages","internalMessages","internalValue","get","set","isDisabled","form","isInteractive","isReadonly","validations","validationState","watch","handler","newVal","deep","$nextTick","val","beforeMount","created","register","beforeDestroy","unregister","Array","reset","resetValidation","validate","force","rule","root","render","node","activator","validator","includes","internalActivator","openOnHover","openOnFocus","activatorElement","activatorNode","events","listeners","mounted","slotType","addActivatorEvents","keys","key","genActivator","on","attrs","genActivatorAttributes","role","genActivatorListeners","e","getActivator","vm","m","getContentSlot","getValueProxy","self","removeActivatorEvents","resetActivator","validateAttachTarget","Node","attach","contentClass","hasDetached","hasContent","deactivated","getScopeIdAttrs","scopeId","initDetach","_isDestroyed","mixins","functional","max","isGreater","h","staticClass","class","ctx","onObserve","destroyed","i","callback","console","onVisible","dirtyTypes","directives","resize","ripple","inheritAttrs","appendOuterIcon","autofocus","clearable","clearIcon","counter","counterValue","filled","flat","fullWidth","label","outlined","placeholder","prefix","prependInnerIcon","reverse","rounded","shaped","singleLine","solo","soloInverted","suffix","badInput","labelWidth","prefixWidth","prependWidth","initialValue","isBooted","isClearing","classes","VInput","computedCounterValue","hasCounter","hasDetails","isDirty","isEnclosed","isLabelActive","isSingle","isSolo","labelPosition","offset","labelValue","$vuetify","rtl","left","right","showLabel","hasLabel","$attrs","hasOwnProperty","requestAnimationFrame","focus","blur","clearableCallback","input","genAppendSlot","slot","genIcon","genSlot","genPrependInnerSlot","genIconSlot","genInputSlot","prepend","genClearIcon","genCounter","attrs$","dark","light","genControl","genDefaultSlot","genFieldset","genLabel","focused","for","VLabel","genLegend","width","span","domProps","innerHTML","style","genInput","id","keydown","onKeyDown","ref","modifiers","quiet","onResize","genMessages","messagesNode","counterNode","genTextFieldSlot","genAffix","onBlur","onClick","onFocus","$emit","onInput","onMouseDown","onMouseUp","setLabelWidth","scrollWidth","$el","setPrefixWidth","setPrependWidth","tryAutofocus","updateValue","position","genChildren","tag","map","genMessage","message","setTextColor","themeClasses","appendIcon","backgroundColor","dense","hideDetails","hint","persistentHint","prependIcon","hasMouseDown","computedId","messagesToDisplay","hasHint","validation","validationResult","showDetails","beforeCreate","$options","model","genContent","extraData","icon","eventName","hasListener","listeners$","mergeData","click","mouseup","setBackgroundColor","mousedown","scopedSlots","genPrependSlot","returnValue","originalValue","save","_vm","_h","_c","_self","staticRenderFns","script","component","VOverlay","VProgressCircular"],"mappings":"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","file":"js/chunk-ccdccba2.7f8da513.js","sourcesContent":["export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from '@vue/composition-api';\n\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type ReactiveFunction<TParam> = () => TParam;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  bigint: any;\n  timestamptz: any;\n  uuid: any;\n};\n\n/** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Boolean']>;\n  _gt?: Maybe<Scalars['Boolean']>;\n  _gte?: Maybe<Scalars['Boolean']>;\n  _in?: Maybe<Array<Scalars['Boolean']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Boolean']>;\n  _lte?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Scalars['Boolean']>;\n  _nin?: Maybe<Array<Scalars['Boolean']>>;\n};\n\n/** expression to compare columns of type Int. All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\n/** expression to compare columns of type String. All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  _nlike?: Maybe<Scalars['String']>;\n  _nsimilar?: Maybe<Scalars['String']>;\n  _similar?: Maybe<Scalars['String']>;\n};\n\n/** expression to compare columns of type bigint. All fields are combined with logical 'AND'. */\nexport type Bigint_Comparison_Exp = {\n  _eq?: Maybe<Scalars['bigint']>;\n  _gt?: Maybe<Scalars['bigint']>;\n  _gte?: Maybe<Scalars['bigint']>;\n  _in?: Maybe<Array<Scalars['bigint']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['bigint']>;\n  _lte?: Maybe<Scalars['bigint']>;\n  _neq?: Maybe<Scalars['bigint']>;\n  _nin?: Maybe<Array<Scalars['bigint']>>;\n};\n\n/** columns and relationships of \"contest\" */\nexport type Contest = {\n  __typename?: 'contest';\n  id: Scalars['uuid'];\n  /** An object relationship */\n  participant?: Maybe<Participants>;\n  participant_id?: Maybe<Scalars['uuid']>;\n  submission_time: Scalars['timestamptz'];\n  submission_url: Scalars['String'];\n  vote_count: Scalars['Int'];\n};\n\n/** aggregated selection of \"contest\" */\nexport type Contest_Aggregate = {\n  __typename?: 'contest_aggregate';\n  aggregate?: Maybe<Contest_Aggregate_Fields>;\n  nodes: Array<Contest>;\n};\n\n/** aggregate fields of \"contest\" */\nexport type Contest_Aggregate_Fields = {\n  __typename?: 'contest_aggregate_fields';\n  avg?: Maybe<Contest_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Contest_Max_Fields>;\n  min?: Maybe<Contest_Min_Fields>;\n  stddev?: Maybe<Contest_Stddev_Fields>;\n  stddev_pop?: Maybe<Contest_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Contest_Stddev_Samp_Fields>;\n  sum?: Maybe<Contest_Sum_Fields>;\n  var_pop?: Maybe<Contest_Var_Pop_Fields>;\n  var_samp?: Maybe<Contest_Var_Samp_Fields>;\n  variance?: Maybe<Contest_Variance_Fields>;\n};\n\n/** aggregate fields of \"contest\" */\nexport type Contest_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Contest_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"contest\" */\nexport type Contest_Aggregate_Order_By = {\n  avg?: Maybe<Contest_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Contest_Max_Order_By>;\n  min?: Maybe<Contest_Min_Order_By>;\n  stddev?: Maybe<Contest_Stddev_Order_By>;\n  stddev_pop?: Maybe<Contest_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Contest_Stddev_Samp_Order_By>;\n  sum?: Maybe<Contest_Sum_Order_By>;\n  var_pop?: Maybe<Contest_Var_Pop_Order_By>;\n  var_samp?: Maybe<Contest_Var_Samp_Order_By>;\n  variance?: Maybe<Contest_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"contest\" */\nexport type Contest_Arr_Rel_Insert_Input = {\n  data: Array<Contest_Insert_Input>;\n  on_conflict?: Maybe<Contest_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Contest_Avg_Fields = {\n  __typename?: 'contest_avg_fields';\n  vote_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"contest\" */\nexport type Contest_Avg_Order_By = {\n  vote_count?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"contest\". All fields are combined with a logical 'AND'. */\nexport type Contest_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Contest_Bool_Exp>>>;\n  _not?: Maybe<Contest_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Contest_Bool_Exp>>>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  participant?: Maybe<Participants_Bool_Exp>;\n  participant_id?: Maybe<Uuid_Comparison_Exp>;\n  submission_time?: Maybe<Timestamptz_Comparison_Exp>;\n  submission_url?: Maybe<String_Comparison_Exp>;\n  vote_count?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"contest\" */\nexport enum Contest_Constraint {\n  /** unique or primary key constraint */\n  ContestParticipantIdKey = 'contest_participant_id_key',\n  /** unique or primary key constraint */\n  ContestPkey = 'contest_pkey'\n}\n\n/** input type for incrementing integer column in table \"contest\" */\nexport type Contest_Inc_Input = {\n  vote_count?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"contest\" */\nexport type Contest_Insert_Input = {\n  id?: Maybe<Scalars['uuid']>;\n  participant?: Maybe<Participants_Obj_Rel_Insert_Input>;\n  participant_id?: Maybe<Scalars['uuid']>;\n  submission_time?: Maybe<Scalars['timestamptz']>;\n  submission_url?: Maybe<Scalars['String']>;\n  vote_count?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Contest_Max_Fields = {\n  __typename?: 'contest_max_fields';\n  id?: Maybe<Scalars['uuid']>;\n  participant_id?: Maybe<Scalars['uuid']>;\n  submission_time?: Maybe<Scalars['timestamptz']>;\n  submission_url?: Maybe<Scalars['String']>;\n  vote_count?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"contest\" */\nexport type Contest_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  participant_id?: Maybe<Order_By>;\n  submission_time?: Maybe<Order_By>;\n  submission_url?: Maybe<Order_By>;\n  vote_count?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Contest_Min_Fields = {\n  __typename?: 'contest_min_fields';\n  id?: Maybe<Scalars['uuid']>;\n  participant_id?: Maybe<Scalars['uuid']>;\n  submission_time?: Maybe<Scalars['timestamptz']>;\n  submission_url?: Maybe<Scalars['String']>;\n  vote_count?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"contest\" */\nexport type Contest_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  participant_id?: Maybe<Order_By>;\n  submission_time?: Maybe<Order_By>;\n  submission_url?: Maybe<Order_By>;\n  vote_count?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"contest\" */\nexport type Contest_Mutation_Response = {\n  __typename?: 'contest_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Contest>;\n};\n\n/** input type for inserting object relation for remote table \"contest\" */\nexport type Contest_Obj_Rel_Insert_Input = {\n  data: Contest_Insert_Input;\n  on_conflict?: Maybe<Contest_On_Conflict>;\n};\n\n/** on conflict condition type for table \"contest\" */\nexport type Contest_On_Conflict = {\n  constraint: Contest_Constraint;\n  update_columns: Array<Contest_Update_Column>;\n  where?: Maybe<Contest_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"contest\" */\nexport type Contest_Order_By = {\n  id?: Maybe<Order_By>;\n  participant?: Maybe<Participants_Order_By>;\n  participant_id?: Maybe<Order_By>;\n  submission_time?: Maybe<Order_By>;\n  submission_url?: Maybe<Order_By>;\n  vote_count?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"contest\" */\nexport type Contest_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"contest\" */\nexport enum Contest_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ParticipantId = 'participant_id',\n  /** column name */\n  SubmissionTime = 'submission_time',\n  /** column name */\n  SubmissionUrl = 'submission_url',\n  /** column name */\n  VoteCount = 'vote_count'\n}\n\n/** input type for updating data in table \"contest\" */\nexport type Contest_Set_Input = {\n  id?: Maybe<Scalars['uuid']>;\n  participant_id?: Maybe<Scalars['uuid']>;\n  submission_time?: Maybe<Scalars['timestamptz']>;\n  submission_url?: Maybe<Scalars['String']>;\n  vote_count?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Contest_Stddev_Fields = {\n  __typename?: 'contest_stddev_fields';\n  vote_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"contest\" */\nexport type Contest_Stddev_Order_By = {\n  vote_count?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Contest_Stddev_Pop_Fields = {\n  __typename?: 'contest_stddev_pop_fields';\n  vote_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"contest\" */\nexport type Contest_Stddev_Pop_Order_By = {\n  vote_count?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Contest_Stddev_Samp_Fields = {\n  __typename?: 'contest_stddev_samp_fields';\n  vote_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"contest\" */\nexport type Contest_Stddev_Samp_Order_By = {\n  vote_count?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Contest_Sum_Fields = {\n  __typename?: 'contest_sum_fields';\n  vote_count?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"contest\" */\nexport type Contest_Sum_Order_By = {\n  vote_count?: Maybe<Order_By>;\n};\n\n/** update columns of table \"contest\" */\nexport enum Contest_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ParticipantId = 'participant_id',\n  /** column name */\n  SubmissionTime = 'submission_time',\n  /** column name */\n  SubmissionUrl = 'submission_url',\n  /** column name */\n  VoteCount = 'vote_count'\n}\n\n/** aggregate var_pop on columns */\nexport type Contest_Var_Pop_Fields = {\n  __typename?: 'contest_var_pop_fields';\n  vote_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"contest\" */\nexport type Contest_Var_Pop_Order_By = {\n  vote_count?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Contest_Var_Samp_Fields = {\n  __typename?: 'contest_var_samp_fields';\n  vote_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"contest\" */\nexport type Contest_Var_Samp_Order_By = {\n  vote_count?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Contest_Variance_Fields = {\n  __typename?: 'contest_variance_fields';\n  vote_count?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"contest\" */\nexport type Contest_Variance_Order_By = {\n  vote_count?: Maybe<Order_By>;\n};\n\n/** columns and relationships of \"control\" */\nexport type Control = {\n  __typename?: 'control';\n  id: Scalars['uuid'];\n  leaderboard: Scalars['Boolean'];\n  submission: Scalars['Boolean'];\n  vote: Scalars['Boolean'];\n};\n\n/** aggregated selection of \"control\" */\nexport type Control_Aggregate = {\n  __typename?: 'control_aggregate';\n  aggregate?: Maybe<Control_Aggregate_Fields>;\n  nodes: Array<Control>;\n};\n\n/** aggregate fields of \"control\" */\nexport type Control_Aggregate_Fields = {\n  __typename?: 'control_aggregate_fields';\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Control_Max_Fields>;\n  min?: Maybe<Control_Min_Fields>;\n};\n\n/** aggregate fields of \"control\" */\nexport type Control_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Control_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"control\" */\nexport type Control_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Control_Max_Order_By>;\n  min?: Maybe<Control_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"control\" */\nexport type Control_Arr_Rel_Insert_Input = {\n  data: Array<Control_Insert_Input>;\n  on_conflict?: Maybe<Control_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"control\". All fields are combined with a logical 'AND'. */\nexport type Control_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Control_Bool_Exp>>>;\n  _not?: Maybe<Control_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Control_Bool_Exp>>>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  leaderboard?: Maybe<Boolean_Comparison_Exp>;\n  submission?: Maybe<Boolean_Comparison_Exp>;\n  vote?: Maybe<Boolean_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"control\" */\nexport enum Control_Constraint {\n  /** unique or primary key constraint */\n  ControlPkey = 'control_pkey'\n}\n\n/** input type for inserting data into table \"control\" */\nexport type Control_Insert_Input = {\n  id?: Maybe<Scalars['uuid']>;\n  leaderboard?: Maybe<Scalars['Boolean']>;\n  submission?: Maybe<Scalars['Boolean']>;\n  vote?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate max on columns */\nexport type Control_Max_Fields = {\n  __typename?: 'control_max_fields';\n  id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"control\" */\nexport type Control_Max_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Control_Min_Fields = {\n  __typename?: 'control_min_fields';\n  id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"control\" */\nexport type Control_Min_Order_By = {\n  id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"control\" */\nexport type Control_Mutation_Response = {\n  __typename?: 'control_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Control>;\n};\n\n/** input type for inserting object relation for remote table \"control\" */\nexport type Control_Obj_Rel_Insert_Input = {\n  data: Control_Insert_Input;\n  on_conflict?: Maybe<Control_On_Conflict>;\n};\n\n/** on conflict condition type for table \"control\" */\nexport type Control_On_Conflict = {\n  constraint: Control_Constraint;\n  update_columns: Array<Control_Update_Column>;\n  where?: Maybe<Control_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"control\" */\nexport type Control_Order_By = {\n  id?: Maybe<Order_By>;\n  leaderboard?: Maybe<Order_By>;\n  submission?: Maybe<Order_By>;\n  vote?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"control\" */\nexport type Control_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"control\" */\nexport enum Control_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Leaderboard = 'leaderboard',\n  /** column name */\n  Submission = 'submission',\n  /** column name */\n  Vote = 'vote'\n}\n\n/** input type for updating data in table \"control\" */\nexport type Control_Set_Input = {\n  id?: Maybe<Scalars['uuid']>;\n  leaderboard?: Maybe<Scalars['Boolean']>;\n  submission?: Maybe<Scalars['Boolean']>;\n  vote?: Maybe<Scalars['Boolean']>;\n};\n\n/** update columns of table \"control\" */\nexport enum Control_Update_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Leaderboard = 'leaderboard',\n  /** column name */\n  Submission = 'submission',\n  /** column name */\n  Vote = 'vote'\n}\n\n/** columns and relationships of \"games\" */\nexport type Games = {\n  __typename?: 'games';\n  game_name: Scalars['String'];\n  id: Scalars['uuid'];\n  /** An array relationship */\n  teams_scores: Array<Teams_Scores>;\n  /** An aggregated array relationship */\n  teams_scores_aggregate: Teams_Scores_Aggregate;\n};\n\n/** columns and relationships of \"games\" */\nexport type GamesTeams_ScoresArgs = {\n  distinct_on?: Maybe<Array<Teams_Scores_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Scores_Order_By>>;\n  where?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** columns and relationships of \"games\" */\nexport type GamesTeams_Scores_AggregateArgs = {\n  distinct_on?: Maybe<Array<Teams_Scores_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Scores_Order_By>>;\n  where?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** aggregated selection of \"games\" */\nexport type Games_Aggregate = {\n  __typename?: 'games_aggregate';\n  aggregate?: Maybe<Games_Aggregate_Fields>;\n  nodes: Array<Games>;\n};\n\n/** aggregate fields of \"games\" */\nexport type Games_Aggregate_Fields = {\n  __typename?: 'games_aggregate_fields';\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Games_Max_Fields>;\n  min?: Maybe<Games_Min_Fields>;\n};\n\n/** aggregate fields of \"games\" */\nexport type Games_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Games_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"games\" */\nexport type Games_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Games_Max_Order_By>;\n  min?: Maybe<Games_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"games\" */\nexport type Games_Arr_Rel_Insert_Input = {\n  data: Array<Games_Insert_Input>;\n  on_conflict?: Maybe<Games_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"games\". All fields are combined with a logical 'AND'. */\nexport type Games_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Games_Bool_Exp>>>;\n  _not?: Maybe<Games_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Games_Bool_Exp>>>;\n  game_name?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  teams_scores?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"games\" */\nexport enum Games_Constraint {\n  /** unique or primary key constraint */\n  GamesPkey = 'games_pkey'\n}\n\n/** input type for inserting data into table \"games\" */\nexport type Games_Insert_Input = {\n  game_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  teams_scores?: Maybe<Teams_Scores_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Games_Max_Fields = {\n  __typename?: 'games_max_fields';\n  game_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"games\" */\nexport type Games_Max_Order_By = {\n  game_name?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Games_Min_Fields = {\n  __typename?: 'games_min_fields';\n  game_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"games\" */\nexport type Games_Min_Order_By = {\n  game_name?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"games\" */\nexport type Games_Mutation_Response = {\n  __typename?: 'games_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Games>;\n};\n\n/** input type for inserting object relation for remote table \"games\" */\nexport type Games_Obj_Rel_Insert_Input = {\n  data: Games_Insert_Input;\n  on_conflict?: Maybe<Games_On_Conflict>;\n};\n\n/** on conflict condition type for table \"games\" */\nexport type Games_On_Conflict = {\n  constraint: Games_Constraint;\n  update_columns: Array<Games_Update_Column>;\n  where?: Maybe<Games_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"games\" */\nexport type Games_Order_By = {\n  game_name?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  teams_scores_aggregate?: Maybe<Teams_Scores_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"games\" */\nexport type Games_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"games\" */\nexport enum Games_Select_Column {\n  /** column name */\n  GameName = 'game_name',\n  /** column name */\n  Id = 'id'\n}\n\n/** input type for updating data in table \"games\" */\nexport type Games_Set_Input = {\n  game_name?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n};\n\n/** update columns of table \"games\" */\nexport enum Games_Update_Column {\n  /** column name */\n  GameName = 'game_name',\n  /** column name */\n  Id = 'id'\n}\n\n/** columns and relationships of \"leaderboard_public\" */\nexport type Leaderboard_Public = {\n  __typename?: 'leaderboard_public';\n  name?: Maybe<Scalars['String']>;\n  picture_url?: Maybe<Scalars['String']>;\n  score?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregated selection of \"leaderboard_public\" */\nexport type Leaderboard_Public_Aggregate = {\n  __typename?: 'leaderboard_public_aggregate';\n  aggregate?: Maybe<Leaderboard_Public_Aggregate_Fields>;\n  nodes: Array<Leaderboard_Public>;\n};\n\n/** aggregate fields of \"leaderboard_public\" */\nexport type Leaderboard_Public_Aggregate_Fields = {\n  __typename?: 'leaderboard_public_aggregate_fields';\n  avg?: Maybe<Leaderboard_Public_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Leaderboard_Public_Max_Fields>;\n  min?: Maybe<Leaderboard_Public_Min_Fields>;\n  stddev?: Maybe<Leaderboard_Public_Stddev_Fields>;\n  stddev_pop?: Maybe<Leaderboard_Public_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Leaderboard_Public_Stddev_Samp_Fields>;\n  sum?: Maybe<Leaderboard_Public_Sum_Fields>;\n  var_pop?: Maybe<Leaderboard_Public_Var_Pop_Fields>;\n  var_samp?: Maybe<Leaderboard_Public_Var_Samp_Fields>;\n  variance?: Maybe<Leaderboard_Public_Variance_Fields>;\n};\n\n/** aggregate fields of \"leaderboard_public\" */\nexport type Leaderboard_Public_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Leaderboard_Public_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Aggregate_Order_By = {\n  avg?: Maybe<Leaderboard_Public_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Leaderboard_Public_Max_Order_By>;\n  min?: Maybe<Leaderboard_Public_Min_Order_By>;\n  stddev?: Maybe<Leaderboard_Public_Stddev_Order_By>;\n  stddev_pop?: Maybe<Leaderboard_Public_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Leaderboard_Public_Stddev_Samp_Order_By>;\n  sum?: Maybe<Leaderboard_Public_Sum_Order_By>;\n  var_pop?: Maybe<Leaderboard_Public_Var_Pop_Order_By>;\n  var_samp?: Maybe<Leaderboard_Public_Var_Samp_Order_By>;\n  variance?: Maybe<Leaderboard_Public_Variance_Order_By>;\n};\n\n/** aggregate avg on columns */\nexport type Leaderboard_Public_Avg_Fields = {\n  __typename?: 'leaderboard_public_avg_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Avg_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"leaderboard_public\". All fields are combined with a logical 'AND'. */\nexport type Leaderboard_Public_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Leaderboard_Public_Bool_Exp>>>;\n  _not?: Maybe<Leaderboard_Public_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Leaderboard_Public_Bool_Exp>>>;\n  name?: Maybe<String_Comparison_Exp>;\n  picture_url?: Maybe<String_Comparison_Exp>;\n  score?: Maybe<Bigint_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Leaderboard_Public_Max_Fields = {\n  __typename?: 'leaderboard_public_max_fields';\n  name?: Maybe<Scalars['String']>;\n  picture_url?: Maybe<Scalars['String']>;\n  score?: Maybe<Scalars['bigint']>;\n};\n\n/** order by max() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Max_Order_By = {\n  name?: Maybe<Order_By>;\n  picture_url?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Leaderboard_Public_Min_Fields = {\n  __typename?: 'leaderboard_public_min_fields';\n  name?: Maybe<Scalars['String']>;\n  picture_url?: Maybe<Scalars['String']>;\n  score?: Maybe<Scalars['bigint']>;\n};\n\n/** order by min() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Min_Order_By = {\n  name?: Maybe<Order_By>;\n  picture_url?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** ordering options when selecting data from \"leaderboard_public\" */\nexport type Leaderboard_Public_Order_By = {\n  name?: Maybe<Order_By>;\n  picture_url?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** select columns of table \"leaderboard_public\" */\nexport enum Leaderboard_Public_Select_Column {\n  /** column name */\n  Name = 'name',\n  /** column name */\n  PictureUrl = 'picture_url',\n  /** column name */\n  Score = 'score'\n}\n\n/** aggregate stddev on columns */\nexport type Leaderboard_Public_Stddev_Fields = {\n  __typename?: 'leaderboard_public_stddev_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Stddev_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Leaderboard_Public_Stddev_Pop_Fields = {\n  __typename?: 'leaderboard_public_stddev_pop_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Stddev_Pop_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Leaderboard_Public_Stddev_Samp_Fields = {\n  __typename?: 'leaderboard_public_stddev_samp_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Stddev_Samp_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Leaderboard_Public_Sum_Fields = {\n  __typename?: 'leaderboard_public_sum_fields';\n  score?: Maybe<Scalars['bigint']>;\n};\n\n/** order by sum() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Sum_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type Leaderboard_Public_Var_Pop_Fields = {\n  __typename?: 'leaderboard_public_var_pop_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Var_Pop_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Leaderboard_Public_Var_Samp_Fields = {\n  __typename?: 'leaderboard_public_var_samp_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Var_Samp_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Leaderboard_Public_Variance_Fields = {\n  __typename?: 'leaderboard_public_variance_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"leaderboard_public\" */\nexport type Leaderboard_Public_Variance_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** delete data from the table: \"contest\" */\n  delete_contest?: Maybe<Contest_Mutation_Response>;\n  /** delete single row from the table: \"contest\" */\n  delete_contest_by_pk?: Maybe<Contest>;\n  /** delete data from the table: \"control\" */\n  delete_control?: Maybe<Control_Mutation_Response>;\n  /** delete single row from the table: \"control\" */\n  delete_control_by_pk?: Maybe<Control>;\n  /** delete data from the table: \"games\" */\n  delete_games?: Maybe<Games_Mutation_Response>;\n  /** delete single row from the table: \"games\" */\n  delete_games_by_pk?: Maybe<Games>;\n  /** delete data from the table: \"participants\" */\n  delete_participants?: Maybe<Participants_Mutation_Response>;\n  /** delete single row from the table: \"participants\" */\n  delete_participants_by_pk?: Maybe<Participants>;\n  /** delete data from the table: \"roles\" */\n  delete_roles?: Maybe<Roles_Mutation_Response>;\n  /** delete single row from the table: \"roles\" */\n  delete_roles_by_pk?: Maybe<Roles>;\n  /** delete data from the table: \"status\" */\n  delete_status?: Maybe<Status_Mutation_Response>;\n  /** delete single row from the table: \"status\" */\n  delete_status_by_pk?: Maybe<Status>;\n  /** delete data from the table: \"teams\" */\n  delete_teams?: Maybe<Teams_Mutation_Response>;\n  /** delete single row from the table: \"teams\" */\n  delete_teams_by_pk?: Maybe<Teams>;\n  /** delete data from the table: \"teams_scores\" */\n  delete_teams_scores?: Maybe<Teams_Scores_Mutation_Response>;\n  /** delete single row from the table: \"teams_scores\" */\n  delete_teams_scores_by_pk?: Maybe<Teams_Scores>;\n  /** delete data from the table: \"users\" */\n  delete_users?: Maybe<Users_Mutation_Response>;\n  /** delete single row from the table: \"users\" */\n  delete_users_by_pk?: Maybe<Users>;\n  /** insert data into the table: \"contest\" */\n  insert_contest?: Maybe<Contest_Mutation_Response>;\n  /** insert a single row into the table: \"contest\" */\n  insert_contest_one?: Maybe<Contest>;\n  /** insert data into the table: \"control\" */\n  insert_control?: Maybe<Control_Mutation_Response>;\n  /** insert a single row into the table: \"control\" */\n  insert_control_one?: Maybe<Control>;\n  /** insert data into the table: \"games\" */\n  insert_games?: Maybe<Games_Mutation_Response>;\n  /** insert a single row into the table: \"games\" */\n  insert_games_one?: Maybe<Games>;\n  /** insert data into the table: \"participants\" */\n  insert_participants?: Maybe<Participants_Mutation_Response>;\n  /** insert a single row into the table: \"participants\" */\n  insert_participants_one?: Maybe<Participants>;\n  /** insert data into the table: \"roles\" */\n  insert_roles?: Maybe<Roles_Mutation_Response>;\n  /** insert a single row into the table: \"roles\" */\n  insert_roles_one?: Maybe<Roles>;\n  /** insert data into the table: \"status\" */\n  insert_status?: Maybe<Status_Mutation_Response>;\n  /** insert a single row into the table: \"status\" */\n  insert_status_one?: Maybe<Status>;\n  /** insert data into the table: \"teams\" */\n  insert_teams?: Maybe<Teams_Mutation_Response>;\n  /** insert a single row into the table: \"teams\" */\n  insert_teams_one?: Maybe<Teams>;\n  /** insert data into the table: \"teams_scores\" */\n  insert_teams_scores?: Maybe<Teams_Scores_Mutation_Response>;\n  /** insert a single row into the table: \"teams_scores\" */\n  insert_teams_scores_one?: Maybe<Teams_Scores>;\n  /** insert data into the table: \"users\" */\n  insert_users?: Maybe<Users_Mutation_Response>;\n  /** insert a single row into the table: \"users\" */\n  insert_users_one?: Maybe<Users>;\n  /** update data of the table: \"contest\" */\n  update_contest?: Maybe<Contest_Mutation_Response>;\n  /** update single row of the table: \"contest\" */\n  update_contest_by_pk?: Maybe<Contest>;\n  /** update data of the table: \"control\" */\n  update_control?: Maybe<Control_Mutation_Response>;\n  /** update single row of the table: \"control\" */\n  update_control_by_pk?: Maybe<Control>;\n  /** update data of the table: \"games\" */\n  update_games?: Maybe<Games_Mutation_Response>;\n  /** update single row of the table: \"games\" */\n  update_games_by_pk?: Maybe<Games>;\n  /** update data of the table: \"participants\" */\n  update_participants?: Maybe<Participants_Mutation_Response>;\n  /** update single row of the table: \"participants\" */\n  update_participants_by_pk?: Maybe<Participants>;\n  /** update data of the table: \"roles\" */\n  update_roles?: Maybe<Roles_Mutation_Response>;\n  /** update single row of the table: \"roles\" */\n  update_roles_by_pk?: Maybe<Roles>;\n  /** update data of the table: \"status\" */\n  update_status?: Maybe<Status_Mutation_Response>;\n  /** update single row of the table: \"status\" */\n  update_status_by_pk?: Maybe<Status>;\n  /** update data of the table: \"teams\" */\n  update_teams?: Maybe<Teams_Mutation_Response>;\n  /** update single row of the table: \"teams\" */\n  update_teams_by_pk?: Maybe<Teams>;\n  /** update data of the table: \"teams_scores\" */\n  update_teams_scores?: Maybe<Teams_Scores_Mutation_Response>;\n  /** update single row of the table: \"teams_scores\" */\n  update_teams_scores_by_pk?: Maybe<Teams_Scores>;\n  /** update data of the table: \"users\" */\n  update_users?: Maybe<Users_Mutation_Response>;\n  /** update single row of the table: \"users\" */\n  update_users_by_pk?: Maybe<Users>;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_ContestArgs = {\n  where: Contest_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Contest_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_ControlArgs = {\n  where: Control_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Control_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_GamesArgs = {\n  where: Games_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Games_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_ParticipantsArgs = {\n  where: Participants_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Participants_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_RolesArgs = {\n  where: Roles_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Roles_By_PkArgs = {\n  role: Scalars['String'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_StatusArgs = {\n  where: Status_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Status_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_TeamsArgs = {\n  where: Teams_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Teams_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Teams_ScoresArgs = {\n  where: Teams_Scores_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Teams_Scores_By_PkArgs = {\n  game_id: Scalars['uuid'];\n  team_id: Scalars['uuid'];\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_UsersArgs = {\n  where: Users_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootDelete_Users_By_PkArgs = {\n  auth0_id: Scalars['String'];\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_ContestArgs = {\n  objects: Array<Contest_Insert_Input>;\n  on_conflict?: Maybe<Contest_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Contest_OneArgs = {\n  object: Contest_Insert_Input;\n  on_conflict?: Maybe<Contest_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_ControlArgs = {\n  objects: Array<Control_Insert_Input>;\n  on_conflict?: Maybe<Control_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Control_OneArgs = {\n  object: Control_Insert_Input;\n  on_conflict?: Maybe<Control_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_GamesArgs = {\n  objects: Array<Games_Insert_Input>;\n  on_conflict?: Maybe<Games_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Games_OneArgs = {\n  object: Games_Insert_Input;\n  on_conflict?: Maybe<Games_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_ParticipantsArgs = {\n  objects: Array<Participants_Insert_Input>;\n  on_conflict?: Maybe<Participants_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Participants_OneArgs = {\n  object: Participants_Insert_Input;\n  on_conflict?: Maybe<Participants_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_RolesArgs = {\n  objects: Array<Roles_Insert_Input>;\n  on_conflict?: Maybe<Roles_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Roles_OneArgs = {\n  object: Roles_Insert_Input;\n  on_conflict?: Maybe<Roles_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_StatusArgs = {\n  objects: Array<Status_Insert_Input>;\n  on_conflict?: Maybe<Status_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Status_OneArgs = {\n  object: Status_Insert_Input;\n  on_conflict?: Maybe<Status_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_TeamsArgs = {\n  objects: Array<Teams_Insert_Input>;\n  on_conflict?: Maybe<Teams_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Teams_OneArgs = {\n  object: Teams_Insert_Input;\n  on_conflict?: Maybe<Teams_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Teams_ScoresArgs = {\n  objects: Array<Teams_Scores_Insert_Input>;\n  on_conflict?: Maybe<Teams_Scores_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Teams_Scores_OneArgs = {\n  object: Teams_Scores_Insert_Input;\n  on_conflict?: Maybe<Teams_Scores_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_UsersArgs = {\n  objects: Array<Users_Insert_Input>;\n  on_conflict?: Maybe<Users_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootInsert_Users_OneArgs = {\n  object: Users_Insert_Input;\n  on_conflict?: Maybe<Users_On_Conflict>;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_ContestArgs = {\n  _inc?: Maybe<Contest_Inc_Input>;\n  _set?: Maybe<Contest_Set_Input>;\n  where: Contest_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Contest_By_PkArgs = {\n  _inc?: Maybe<Contest_Inc_Input>;\n  _set?: Maybe<Contest_Set_Input>;\n  pk_columns: Contest_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_ControlArgs = {\n  _set?: Maybe<Control_Set_Input>;\n  where: Control_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Control_By_PkArgs = {\n  _set?: Maybe<Control_Set_Input>;\n  pk_columns: Control_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_GamesArgs = {\n  _set?: Maybe<Games_Set_Input>;\n  where: Games_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Games_By_PkArgs = {\n  _set?: Maybe<Games_Set_Input>;\n  pk_columns: Games_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_ParticipantsArgs = {\n  _inc?: Maybe<Participants_Inc_Input>;\n  _set?: Maybe<Participants_Set_Input>;\n  where: Participants_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Participants_By_PkArgs = {\n  _inc?: Maybe<Participants_Inc_Input>;\n  _set?: Maybe<Participants_Set_Input>;\n  pk_columns: Participants_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_RolesArgs = {\n  _set?: Maybe<Roles_Set_Input>;\n  where: Roles_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Roles_By_PkArgs = {\n  _set?: Maybe<Roles_Set_Input>;\n  pk_columns: Roles_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_StatusArgs = {\n  _set?: Maybe<Status_Set_Input>;\n  where: Status_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Status_By_PkArgs = {\n  _set?: Maybe<Status_Set_Input>;\n  pk_columns: Status_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_TeamsArgs = {\n  _inc?: Maybe<Teams_Inc_Input>;\n  _set?: Maybe<Teams_Set_Input>;\n  where: Teams_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Teams_By_PkArgs = {\n  _inc?: Maybe<Teams_Inc_Input>;\n  _set?: Maybe<Teams_Set_Input>;\n  pk_columns: Teams_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Teams_ScoresArgs = {\n  _inc?: Maybe<Teams_Scores_Inc_Input>;\n  _set?: Maybe<Teams_Scores_Set_Input>;\n  where: Teams_Scores_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Teams_Scores_By_PkArgs = {\n  _inc?: Maybe<Teams_Scores_Inc_Input>;\n  _set?: Maybe<Teams_Scores_Set_Input>;\n  pk_columns: Teams_Scores_Pk_Columns_Input;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_UsersArgs = {\n  _set?: Maybe<Users_Set_Input>;\n  where: Users_Bool_Exp;\n};\n\n/** mutation root */\nexport type Mutation_RootUpdate_Users_By_PkArgs = {\n  _set?: Maybe<Users_Set_Input>;\n  pk_columns: Users_Pk_Columns_Input;\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in the ascending order, nulls last */\n  Asc = 'asc',\n  /** in the ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in the ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in the descending order, nulls first */\n  Desc = 'desc',\n  /** in the descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in the descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\n/** columns and relationships of \"participants\" */\nexport type Participants = {\n  __typename?: 'participants';\n  /** An object relationship */\n  contest_submission?: Maybe<Contest>;\n  contribution: Scalars['Int'];\n  description?: Maybe<Scalars['String']>;\n  emergency_vote: Scalars['Boolean'];\n  id: Scalars['uuid'];\n  imposter_vote_count: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  picometer: Scalars['Boolean'];\n  picometer_hint: Scalars['String'];\n  role: Roles_Enum;\n  score: Scalars['Int'];\n  status: Status_Enum;\n  submission: Scalars['Boolean'];\n  /** An object relationship */\n  team: Teams;\n  team_id: Scalars['uuid'];\n  /** An object relationship */\n  user: Users;\n  user_id: Scalars['String'];\n  viewfinder: Scalars['Boolean'];\n  viewfinder_hint?: Maybe<Scalars['String']>;\n  vote: Scalars['Boolean'];\n};\n\n/** aggregated selection of \"participants\" */\nexport type Participants_Aggregate = {\n  __typename?: 'participants_aggregate';\n  aggregate?: Maybe<Participants_Aggregate_Fields>;\n  nodes: Array<Participants>;\n};\n\n/** aggregate fields of \"participants\" */\nexport type Participants_Aggregate_Fields = {\n  __typename?: 'participants_aggregate_fields';\n  avg?: Maybe<Participants_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Participants_Max_Fields>;\n  min?: Maybe<Participants_Min_Fields>;\n  stddev?: Maybe<Participants_Stddev_Fields>;\n  stddev_pop?: Maybe<Participants_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Participants_Stddev_Samp_Fields>;\n  sum?: Maybe<Participants_Sum_Fields>;\n  var_pop?: Maybe<Participants_Var_Pop_Fields>;\n  var_samp?: Maybe<Participants_Var_Samp_Fields>;\n  variance?: Maybe<Participants_Variance_Fields>;\n};\n\n/** aggregate fields of \"participants\" */\nexport type Participants_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Participants_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"participants\" */\nexport type Participants_Aggregate_Order_By = {\n  avg?: Maybe<Participants_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Participants_Max_Order_By>;\n  min?: Maybe<Participants_Min_Order_By>;\n  stddev?: Maybe<Participants_Stddev_Order_By>;\n  stddev_pop?: Maybe<Participants_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Participants_Stddev_Samp_Order_By>;\n  sum?: Maybe<Participants_Sum_Order_By>;\n  var_pop?: Maybe<Participants_Var_Pop_Order_By>;\n  var_samp?: Maybe<Participants_Var_Samp_Order_By>;\n  variance?: Maybe<Participants_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"participants\" */\nexport type Participants_Arr_Rel_Insert_Input = {\n  data: Array<Participants_Insert_Input>;\n  on_conflict?: Maybe<Participants_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Participants_Avg_Fields = {\n  __typename?: 'participants_avg_fields';\n  contribution?: Maybe<Scalars['Float']>;\n  imposter_vote_count?: Maybe<Scalars['Float']>;\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"participants\" */\nexport type Participants_Avg_Order_By = {\n  contribution?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"participants\". All fields are combined with a logical 'AND'. */\nexport type Participants_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Participants_Bool_Exp>>>;\n  _not?: Maybe<Participants_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Participants_Bool_Exp>>>;\n  contest_submission?: Maybe<Contest_Bool_Exp>;\n  contribution?: Maybe<Int_Comparison_Exp>;\n  description?: Maybe<String_Comparison_Exp>;\n  emergency_vote?: Maybe<Boolean_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  imposter_vote_count?: Maybe<Int_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  picometer?: Maybe<Boolean_Comparison_Exp>;\n  picometer_hint?: Maybe<String_Comparison_Exp>;\n  role?: Maybe<Roles_Enum_Comparison_Exp>;\n  score?: Maybe<Int_Comparison_Exp>;\n  status?: Maybe<Status_Enum_Comparison_Exp>;\n  submission?: Maybe<Boolean_Comparison_Exp>;\n  team?: Maybe<Teams_Bool_Exp>;\n  team_id?: Maybe<Uuid_Comparison_Exp>;\n  user?: Maybe<Users_Bool_Exp>;\n  user_id?: Maybe<String_Comparison_Exp>;\n  viewfinder?: Maybe<Boolean_Comparison_Exp>;\n  viewfinder_hint?: Maybe<String_Comparison_Exp>;\n  vote?: Maybe<Boolean_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"participants\" */\nexport enum Participants_Constraint {\n  /** unique or primary key constraint */\n  ParticipantsPkey = 'participants_pkey',\n  /** unique or primary key constraint */\n  ParticipantsUserIdKey = 'participants_user_id_key'\n}\n\n/** input type for incrementing integer column in table \"participants\" */\nexport type Participants_Inc_Input = {\n  contribution?: Maybe<Scalars['Int']>;\n  imposter_vote_count?: Maybe<Scalars['Int']>;\n  score?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"participants\" */\nexport type Participants_Insert_Input = {\n  contest_submission?: Maybe<Contest_Obj_Rel_Insert_Input>;\n  contribution?: Maybe<Scalars['Int']>;\n  description?: Maybe<Scalars['String']>;\n  emergency_vote?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['uuid']>;\n  imposter_vote_count?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  picometer?: Maybe<Scalars['Boolean']>;\n  picometer_hint?: Maybe<Scalars['String']>;\n  role?: Maybe<Roles_Enum>;\n  score?: Maybe<Scalars['Int']>;\n  status?: Maybe<Status_Enum>;\n  submission?: Maybe<Scalars['Boolean']>;\n  team?: Maybe<Teams_Obj_Rel_Insert_Input>;\n  team_id?: Maybe<Scalars['uuid']>;\n  user?: Maybe<Users_Obj_Rel_Insert_Input>;\n  user_id?: Maybe<Scalars['String']>;\n  viewfinder?: Maybe<Scalars['Boolean']>;\n  viewfinder_hint?: Maybe<Scalars['String']>;\n  vote?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate max on columns */\nexport type Participants_Max_Fields = {\n  __typename?: 'participants_max_fields';\n  contribution?: Maybe<Scalars['Int']>;\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  imposter_vote_count?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  picometer_hint?: Maybe<Scalars['String']>;\n  score?: Maybe<Scalars['Int']>;\n  team_id?: Maybe<Scalars['uuid']>;\n  user_id?: Maybe<Scalars['String']>;\n  viewfinder_hint?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"participants\" */\nexport type Participants_Max_Order_By = {\n  contribution?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  picometer_hint?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n  team_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  viewfinder_hint?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Participants_Min_Fields = {\n  __typename?: 'participants_min_fields';\n  contribution?: Maybe<Scalars['Int']>;\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['uuid']>;\n  imposter_vote_count?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  picometer_hint?: Maybe<Scalars['String']>;\n  score?: Maybe<Scalars['Int']>;\n  team_id?: Maybe<Scalars['uuid']>;\n  user_id?: Maybe<Scalars['String']>;\n  viewfinder_hint?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"participants\" */\nexport type Participants_Min_Order_By = {\n  contribution?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  picometer_hint?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n  team_id?: Maybe<Order_By>;\n  user_id?: Maybe<Order_By>;\n  viewfinder_hint?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"participants\" */\nexport type Participants_Mutation_Response = {\n  __typename?: 'participants_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Participants>;\n};\n\n/** input type for inserting object relation for remote table \"participants\" */\nexport type Participants_Obj_Rel_Insert_Input = {\n  data: Participants_Insert_Input;\n  on_conflict?: Maybe<Participants_On_Conflict>;\n};\n\n/** on conflict condition type for table \"participants\" */\nexport type Participants_On_Conflict = {\n  constraint: Participants_Constraint;\n  update_columns: Array<Participants_Update_Column>;\n  where?: Maybe<Participants_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"participants\" */\nexport type Participants_Order_By = {\n  contest_submission?: Maybe<Contest_Order_By>;\n  contribution?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  emergency_vote?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  picometer?: Maybe<Order_By>;\n  picometer_hint?: Maybe<Order_By>;\n  role?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n  status?: Maybe<Order_By>;\n  submission?: Maybe<Order_By>;\n  team?: Maybe<Teams_Order_By>;\n  team_id?: Maybe<Order_By>;\n  user?: Maybe<Users_Order_By>;\n  user_id?: Maybe<Order_By>;\n  viewfinder?: Maybe<Order_By>;\n  viewfinder_hint?: Maybe<Order_By>;\n  vote?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"participants\" */\nexport type Participants_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** select columns of table \"participants\" */\nexport enum Participants_Select_Column {\n  /** column name */\n  Contribution = 'contribution',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  EmergencyVote = 'emergency_vote',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ImposterVoteCount = 'imposter_vote_count',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Picometer = 'picometer',\n  /** column name */\n  PicometerHint = 'picometer_hint',\n  /** column name */\n  Role = 'role',\n  /** column name */\n  Score = 'score',\n  /** column name */\n  Status = 'status',\n  /** column name */\n  Submission = 'submission',\n  /** column name */\n  TeamId = 'team_id',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Viewfinder = 'viewfinder',\n  /** column name */\n  ViewfinderHint = 'viewfinder_hint',\n  /** column name */\n  Vote = 'vote'\n}\n\n/** input type for updating data in table \"participants\" */\nexport type Participants_Set_Input = {\n  contribution?: Maybe<Scalars['Int']>;\n  description?: Maybe<Scalars['String']>;\n  emergency_vote?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['uuid']>;\n  imposter_vote_count?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  picometer?: Maybe<Scalars['Boolean']>;\n  picometer_hint?: Maybe<Scalars['String']>;\n  role?: Maybe<Roles_Enum>;\n  score?: Maybe<Scalars['Int']>;\n  status?: Maybe<Status_Enum>;\n  submission?: Maybe<Scalars['Boolean']>;\n  team_id?: Maybe<Scalars['uuid']>;\n  user_id?: Maybe<Scalars['String']>;\n  viewfinder?: Maybe<Scalars['Boolean']>;\n  viewfinder_hint?: Maybe<Scalars['String']>;\n  vote?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate stddev on columns */\nexport type Participants_Stddev_Fields = {\n  __typename?: 'participants_stddev_fields';\n  contribution?: Maybe<Scalars['Float']>;\n  imposter_vote_count?: Maybe<Scalars['Float']>;\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"participants\" */\nexport type Participants_Stddev_Order_By = {\n  contribution?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Participants_Stddev_Pop_Fields = {\n  __typename?: 'participants_stddev_pop_fields';\n  contribution?: Maybe<Scalars['Float']>;\n  imposter_vote_count?: Maybe<Scalars['Float']>;\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"participants\" */\nexport type Participants_Stddev_Pop_Order_By = {\n  contribution?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Participants_Stddev_Samp_Fields = {\n  __typename?: 'participants_stddev_samp_fields';\n  contribution?: Maybe<Scalars['Float']>;\n  imposter_vote_count?: Maybe<Scalars['Float']>;\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"participants\" */\nexport type Participants_Stddev_Samp_Order_By = {\n  contribution?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Participants_Sum_Fields = {\n  __typename?: 'participants_sum_fields';\n  contribution?: Maybe<Scalars['Int']>;\n  imposter_vote_count?: Maybe<Scalars['Int']>;\n  score?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"participants\" */\nexport type Participants_Sum_Order_By = {\n  contribution?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** update columns of table \"participants\" */\nexport enum Participants_Update_Column {\n  /** column name */\n  Contribution = 'contribution',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  EmergencyVote = 'emergency_vote',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ImposterVoteCount = 'imposter_vote_count',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Picometer = 'picometer',\n  /** column name */\n  PicometerHint = 'picometer_hint',\n  /** column name */\n  Role = 'role',\n  /** column name */\n  Score = 'score',\n  /** column name */\n  Status = 'status',\n  /** column name */\n  Submission = 'submission',\n  /** column name */\n  TeamId = 'team_id',\n  /** column name */\n  UserId = 'user_id',\n  /** column name */\n  Viewfinder = 'viewfinder',\n  /** column name */\n  ViewfinderHint = 'viewfinder_hint',\n  /** column name */\n  Vote = 'vote'\n}\n\n/** aggregate var_pop on columns */\nexport type Participants_Var_Pop_Fields = {\n  __typename?: 'participants_var_pop_fields';\n  contribution?: Maybe<Scalars['Float']>;\n  imposter_vote_count?: Maybe<Scalars['Float']>;\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"participants\" */\nexport type Participants_Var_Pop_Order_By = {\n  contribution?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Participants_Var_Samp_Fields = {\n  __typename?: 'participants_var_samp_fields';\n  contribution?: Maybe<Scalars['Float']>;\n  imposter_vote_count?: Maybe<Scalars['Float']>;\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"participants\" */\nexport type Participants_Var_Samp_Order_By = {\n  contribution?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Participants_Variance_Fields = {\n  __typename?: 'participants_variance_fields';\n  contribution?: Maybe<Scalars['Float']>;\n  imposter_vote_count?: Maybe<Scalars['Float']>;\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"participants\" */\nexport type Participants_Variance_Order_By = {\n  contribution?: Maybe<Order_By>;\n  imposter_vote_count?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n};\n\n/** query root */\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"contest\" */\n  contest: Array<Contest>;\n  /** fetch aggregated fields from the table: \"contest\" */\n  contest_aggregate: Contest_Aggregate;\n  /** fetch data from the table: \"contest\" using primary key columns */\n  contest_by_pk?: Maybe<Contest>;\n  /** fetch data from the table: \"control\" */\n  control: Array<Control>;\n  /** fetch aggregated fields from the table: \"control\" */\n  control_aggregate: Control_Aggregate;\n  /** fetch data from the table: \"control\" using primary key columns */\n  control_by_pk?: Maybe<Control>;\n  /** fetch data from the table: \"games\" */\n  games: Array<Games>;\n  /** fetch aggregated fields from the table: \"games\" */\n  games_aggregate: Games_Aggregate;\n  /** fetch data from the table: \"games\" using primary key columns */\n  games_by_pk?: Maybe<Games>;\n  /** fetch data from the table: \"leaderboard_public\" */\n  leaderboard_public: Array<Leaderboard_Public>;\n  /** fetch aggregated fields from the table: \"leaderboard_public\" */\n  leaderboard_public_aggregate: Leaderboard_Public_Aggregate;\n  /** fetch data from the table: \"participants\" */\n  participants: Array<Participants>;\n  /** fetch aggregated fields from the table: \"participants\" */\n  participants_aggregate: Participants_Aggregate;\n  /** fetch data from the table: \"participants\" using primary key columns */\n  participants_by_pk?: Maybe<Participants>;\n  /** fetch data from the table: \"roles\" */\n  roles: Array<Roles>;\n  /** fetch aggregated fields from the table: \"roles\" */\n  roles_aggregate: Roles_Aggregate;\n  /** fetch data from the table: \"roles\" using primary key columns */\n  roles_by_pk?: Maybe<Roles>;\n  /** fetch data from the table: \"status\" */\n  status: Array<Status>;\n  /** fetch aggregated fields from the table: \"status\" */\n  status_aggregate: Status_Aggregate;\n  /** fetch data from the table: \"status\" using primary key columns */\n  status_by_pk?: Maybe<Status>;\n  /** fetch data from the table: \"teams\" */\n  teams: Array<Teams>;\n  /** fetch aggregated fields from the table: \"teams\" */\n  teams_aggregate: Teams_Aggregate;\n  /** fetch data from the table: \"teams\" using primary key columns */\n  teams_by_pk?: Maybe<Teams>;\n  /** fetch data from the table: \"teams_scores\" */\n  teams_scores: Array<Teams_Scores>;\n  /** fetch aggregated fields from the table: \"teams_scores\" */\n  teams_scores_aggregate: Teams_Scores_Aggregate;\n  /** fetch data from the table: \"teams_scores\" using primary key columns */\n  teams_scores_by_pk?: Maybe<Teams_Scores>;\n  /** fetch data from the table: \"users\" */\n  users: Array<Users>;\n  /** fetch aggregated fields from the table: \"users\" */\n  users_aggregate: Users_Aggregate;\n  /** fetch data from the table: \"users\" using primary key columns */\n  users_by_pk?: Maybe<Users>;\n};\n\n/** query root */\nexport type Query_RootContestArgs = {\n  distinct_on?: Maybe<Array<Contest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Contest_Order_By>>;\n  where?: Maybe<Contest_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootContest_AggregateArgs = {\n  distinct_on?: Maybe<Array<Contest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Contest_Order_By>>;\n  where?: Maybe<Contest_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootContest_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** query root */\nexport type Query_RootControlArgs = {\n  distinct_on?: Maybe<Array<Control_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Control_Order_By>>;\n  where?: Maybe<Control_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootControl_AggregateArgs = {\n  distinct_on?: Maybe<Array<Control_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Control_Order_By>>;\n  where?: Maybe<Control_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootControl_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** query root */\nexport type Query_RootGamesArgs = {\n  distinct_on?: Maybe<Array<Games_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Games_Order_By>>;\n  where?: Maybe<Games_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootGames_AggregateArgs = {\n  distinct_on?: Maybe<Array<Games_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Games_Order_By>>;\n  where?: Maybe<Games_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootGames_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** query root */\nexport type Query_RootLeaderboard_PublicArgs = {\n  distinct_on?: Maybe<Array<Leaderboard_Public_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Leaderboard_Public_Order_By>>;\n  where?: Maybe<Leaderboard_Public_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootLeaderboard_Public_AggregateArgs = {\n  distinct_on?: Maybe<Array<Leaderboard_Public_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Leaderboard_Public_Order_By>>;\n  where?: Maybe<Leaderboard_Public_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootParticipantsArgs = {\n  distinct_on?: Maybe<Array<Participants_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Participants_Order_By>>;\n  where?: Maybe<Participants_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootParticipants_AggregateArgs = {\n  distinct_on?: Maybe<Array<Participants_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Participants_Order_By>>;\n  where?: Maybe<Participants_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootParticipants_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** query root */\nexport type Query_RootRolesArgs = {\n  distinct_on?: Maybe<Array<Roles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Roles_Order_By>>;\n  where?: Maybe<Roles_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootRoles_AggregateArgs = {\n  distinct_on?: Maybe<Array<Roles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Roles_Order_By>>;\n  where?: Maybe<Roles_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootRoles_By_PkArgs = {\n  role: Scalars['String'];\n};\n\n/** query root */\nexport type Query_RootStatusArgs = {\n  distinct_on?: Maybe<Array<Status_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Status_Order_By>>;\n  where?: Maybe<Status_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootStatus_AggregateArgs = {\n  distinct_on?: Maybe<Array<Status_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Status_Order_By>>;\n  where?: Maybe<Status_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n/** query root */\nexport type Query_RootTeamsArgs = {\n  distinct_on?: Maybe<Array<Teams_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Order_By>>;\n  where?: Maybe<Teams_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootTeams_AggregateArgs = {\n  distinct_on?: Maybe<Array<Teams_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Order_By>>;\n  where?: Maybe<Teams_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootTeams_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** query root */\nexport type Query_RootTeams_ScoresArgs = {\n  distinct_on?: Maybe<Array<Teams_Scores_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Scores_Order_By>>;\n  where?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootTeams_Scores_AggregateArgs = {\n  distinct_on?: Maybe<Array<Teams_Scores_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Scores_Order_By>>;\n  where?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootTeams_Scores_By_PkArgs = {\n  game_id: Scalars['uuid'];\n  team_id: Scalars['uuid'];\n};\n\n/** query root */\nexport type Query_RootUsersArgs = {\n  distinct_on?: Maybe<Array<Users_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Users_Order_By>>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootUsers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Users_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Users_Order_By>>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n/** query root */\nexport type Query_RootUsers_By_PkArgs = {\n  auth0_id: Scalars['String'];\n};\n\n/** columns and relationships of \"roles\" */\nexport type Roles = {\n  __typename?: 'roles';\n  role: Scalars['String'];\n};\n\n/** aggregated selection of \"roles\" */\nexport type Roles_Aggregate = {\n  __typename?: 'roles_aggregate';\n  aggregate?: Maybe<Roles_Aggregate_Fields>;\n  nodes: Array<Roles>;\n};\n\n/** aggregate fields of \"roles\" */\nexport type Roles_Aggregate_Fields = {\n  __typename?: 'roles_aggregate_fields';\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Roles_Max_Fields>;\n  min?: Maybe<Roles_Min_Fields>;\n};\n\n/** aggregate fields of \"roles\" */\nexport type Roles_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Roles_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"roles\" */\nexport type Roles_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Roles_Max_Order_By>;\n  min?: Maybe<Roles_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"roles\" */\nexport type Roles_Arr_Rel_Insert_Input = {\n  data: Array<Roles_Insert_Input>;\n  on_conflict?: Maybe<Roles_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"roles\". All fields are combined with a logical 'AND'. */\nexport type Roles_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Roles_Bool_Exp>>>;\n  _not?: Maybe<Roles_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Roles_Bool_Exp>>>;\n  role?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"roles\" */\nexport enum Roles_Constraint {\n  /** unique or primary key constraint */\n  RolesPkey = 'roles_pkey'\n}\n\nexport enum Roles_Enum {\n  Admin = 'ADMIN',\n  Crewmate = 'CREWMATE',\n  Imposter = 'IMPOSTER',\n  Impostor = 'IMPOSTOR'\n}\n\n/** expression to compare columns of type roles_enum. All fields are combined with logical 'AND'. */\nexport type Roles_Enum_Comparison_Exp = {\n  _eq?: Maybe<Roles_Enum>;\n  _in?: Maybe<Array<Roles_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Roles_Enum>;\n  _nin?: Maybe<Array<Roles_Enum>>;\n};\n\n/** input type for inserting data into table \"roles\" */\nexport type Roles_Insert_Input = {\n  role?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Roles_Max_Fields = {\n  __typename?: 'roles_max_fields';\n  role?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"roles\" */\nexport type Roles_Max_Order_By = {\n  role?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Roles_Min_Fields = {\n  __typename?: 'roles_min_fields';\n  role?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"roles\" */\nexport type Roles_Min_Order_By = {\n  role?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"roles\" */\nexport type Roles_Mutation_Response = {\n  __typename?: 'roles_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Roles>;\n};\n\n/** input type for inserting object relation for remote table \"roles\" */\nexport type Roles_Obj_Rel_Insert_Input = {\n  data: Roles_Insert_Input;\n  on_conflict?: Maybe<Roles_On_Conflict>;\n};\n\n/** on conflict condition type for table \"roles\" */\nexport type Roles_On_Conflict = {\n  constraint: Roles_Constraint;\n  update_columns: Array<Roles_Update_Column>;\n  where?: Maybe<Roles_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"roles\" */\nexport type Roles_Order_By = {\n  role?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"roles\" */\nexport type Roles_Pk_Columns_Input = {\n  role: Scalars['String'];\n};\n\n/** select columns of table \"roles\" */\nexport enum Roles_Select_Column {\n  /** column name */\n  Role = 'role'\n}\n\n/** input type for updating data in table \"roles\" */\nexport type Roles_Set_Input = {\n  role?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"roles\" */\nexport enum Roles_Update_Column {\n  /** column name */\n  Role = 'role'\n}\n\n/** columns and relationships of \"status\" */\nexport type Status = {\n  __typename?: 'status';\n  /** An array relationship */\n  participants: Array<Participants>;\n  /** An aggregated array relationship */\n  participants_aggregate: Participants_Aggregate;\n  status: Scalars['String'];\n};\n\n/** columns and relationships of \"status\" */\nexport type StatusParticipantsArgs = {\n  distinct_on?: Maybe<Array<Participants_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Participants_Order_By>>;\n  where?: Maybe<Participants_Bool_Exp>;\n};\n\n/** columns and relationships of \"status\" */\nexport type StatusParticipants_AggregateArgs = {\n  distinct_on?: Maybe<Array<Participants_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Participants_Order_By>>;\n  where?: Maybe<Participants_Bool_Exp>;\n};\n\n/** aggregated selection of \"status\" */\nexport type Status_Aggregate = {\n  __typename?: 'status_aggregate';\n  aggregate?: Maybe<Status_Aggregate_Fields>;\n  nodes: Array<Status>;\n};\n\n/** aggregate fields of \"status\" */\nexport type Status_Aggregate_Fields = {\n  __typename?: 'status_aggregate_fields';\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Status_Max_Fields>;\n  min?: Maybe<Status_Min_Fields>;\n};\n\n/** aggregate fields of \"status\" */\nexport type Status_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Status_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"status\" */\nexport type Status_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Status_Max_Order_By>;\n  min?: Maybe<Status_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"status\" */\nexport type Status_Arr_Rel_Insert_Input = {\n  data: Array<Status_Insert_Input>;\n  on_conflict?: Maybe<Status_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"status\". All fields are combined with a logical 'AND'. */\nexport type Status_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Status_Bool_Exp>>>;\n  _not?: Maybe<Status_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Status_Bool_Exp>>>;\n  participants?: Maybe<Participants_Bool_Exp>;\n  status?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"status\" */\nexport enum Status_Constraint {\n  /** unique or primary key constraint */\n  StatusPkey = 'status_pkey'\n}\n\nexport enum Status_Enum {\n  Alive = 'ALIVE',\n  Dead = 'DEAD'\n}\n\n/** expression to compare columns of type status_enum. All fields are combined with logical 'AND'. */\nexport type Status_Enum_Comparison_Exp = {\n  _eq?: Maybe<Status_Enum>;\n  _in?: Maybe<Array<Status_Enum>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _neq?: Maybe<Status_Enum>;\n  _nin?: Maybe<Array<Status_Enum>>;\n};\n\n/** input type for inserting data into table \"status\" */\nexport type Status_Insert_Input = {\n  participants?: Maybe<Participants_Arr_Rel_Insert_Input>;\n  status?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Status_Max_Fields = {\n  __typename?: 'status_max_fields';\n  status?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"status\" */\nexport type Status_Max_Order_By = {\n  status?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Status_Min_Fields = {\n  __typename?: 'status_min_fields';\n  status?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"status\" */\nexport type Status_Min_Order_By = {\n  status?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"status\" */\nexport type Status_Mutation_Response = {\n  __typename?: 'status_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Status>;\n};\n\n/** input type for inserting object relation for remote table \"status\" */\nexport type Status_Obj_Rel_Insert_Input = {\n  data: Status_Insert_Input;\n  on_conflict?: Maybe<Status_On_Conflict>;\n};\n\n/** on conflict condition type for table \"status\" */\nexport type Status_On_Conflict = {\n  constraint: Status_Constraint;\n  update_columns: Array<Status_Update_Column>;\n  where?: Maybe<Status_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"status\" */\nexport type Status_Order_By = {\n  participants_aggregate?: Maybe<Participants_Aggregate_Order_By>;\n  status?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"status\" */\nexport type Status_Pk_Columns_Input = {\n  status: Scalars['String'];\n};\n\n/** select columns of table \"status\" */\nexport enum Status_Select_Column {\n  /** column name */\n  Status = 'status'\n}\n\n/** input type for updating data in table \"status\" */\nexport type Status_Set_Input = {\n  status?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"status\" */\nexport enum Status_Update_Column {\n  /** column name */\n  Status = 'status'\n}\n\n/** subscription root */\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"contest\" */\n  contest: Array<Contest>;\n  /** fetch aggregated fields from the table: \"contest\" */\n  contest_aggregate: Contest_Aggregate;\n  /** fetch data from the table: \"contest\" using primary key columns */\n  contest_by_pk?: Maybe<Contest>;\n  /** fetch data from the table: \"control\" */\n  control: Array<Control>;\n  /** fetch aggregated fields from the table: \"control\" */\n  control_aggregate: Control_Aggregate;\n  /** fetch data from the table: \"control\" using primary key columns */\n  control_by_pk?: Maybe<Control>;\n  /** fetch data from the table: \"games\" */\n  games: Array<Games>;\n  /** fetch aggregated fields from the table: \"games\" */\n  games_aggregate: Games_Aggregate;\n  /** fetch data from the table: \"games\" using primary key columns */\n  games_by_pk?: Maybe<Games>;\n  /** fetch data from the table: \"leaderboard_public\" */\n  leaderboard_public: Array<Leaderboard_Public>;\n  /** fetch aggregated fields from the table: \"leaderboard_public\" */\n  leaderboard_public_aggregate: Leaderboard_Public_Aggregate;\n  /** fetch data from the table: \"participants\" */\n  participants: Array<Participants>;\n  /** fetch aggregated fields from the table: \"participants\" */\n  participants_aggregate: Participants_Aggregate;\n  /** fetch data from the table: \"participants\" using primary key columns */\n  participants_by_pk?: Maybe<Participants>;\n  /** fetch data from the table: \"roles\" */\n  roles: Array<Roles>;\n  /** fetch aggregated fields from the table: \"roles\" */\n  roles_aggregate: Roles_Aggregate;\n  /** fetch data from the table: \"roles\" using primary key columns */\n  roles_by_pk?: Maybe<Roles>;\n  /** fetch data from the table: \"status\" */\n  status: Array<Status>;\n  /** fetch aggregated fields from the table: \"status\" */\n  status_aggregate: Status_Aggregate;\n  /** fetch data from the table: \"status\" using primary key columns */\n  status_by_pk?: Maybe<Status>;\n  /** fetch data from the table: \"teams\" */\n  teams: Array<Teams>;\n  /** fetch aggregated fields from the table: \"teams\" */\n  teams_aggregate: Teams_Aggregate;\n  /** fetch data from the table: \"teams\" using primary key columns */\n  teams_by_pk?: Maybe<Teams>;\n  /** fetch data from the table: \"teams_scores\" */\n  teams_scores: Array<Teams_Scores>;\n  /** fetch aggregated fields from the table: \"teams_scores\" */\n  teams_scores_aggregate: Teams_Scores_Aggregate;\n  /** fetch data from the table: \"teams_scores\" using primary key columns */\n  teams_scores_by_pk?: Maybe<Teams_Scores>;\n  /** fetch data from the table: \"users\" */\n  users: Array<Users>;\n  /** fetch aggregated fields from the table: \"users\" */\n  users_aggregate: Users_Aggregate;\n  /** fetch data from the table: \"users\" using primary key columns */\n  users_by_pk?: Maybe<Users>;\n};\n\n/** subscription root */\nexport type Subscription_RootContestArgs = {\n  distinct_on?: Maybe<Array<Contest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Contest_Order_By>>;\n  where?: Maybe<Contest_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootContest_AggregateArgs = {\n  distinct_on?: Maybe<Array<Contest_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Contest_Order_By>>;\n  where?: Maybe<Contest_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootContest_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** subscription root */\nexport type Subscription_RootControlArgs = {\n  distinct_on?: Maybe<Array<Control_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Control_Order_By>>;\n  where?: Maybe<Control_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootControl_AggregateArgs = {\n  distinct_on?: Maybe<Array<Control_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Control_Order_By>>;\n  where?: Maybe<Control_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootControl_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** subscription root */\nexport type Subscription_RootGamesArgs = {\n  distinct_on?: Maybe<Array<Games_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Games_Order_By>>;\n  where?: Maybe<Games_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootGames_AggregateArgs = {\n  distinct_on?: Maybe<Array<Games_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Games_Order_By>>;\n  where?: Maybe<Games_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootGames_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** subscription root */\nexport type Subscription_RootLeaderboard_PublicArgs = {\n  distinct_on?: Maybe<Array<Leaderboard_Public_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Leaderboard_Public_Order_By>>;\n  where?: Maybe<Leaderboard_Public_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootLeaderboard_Public_AggregateArgs = {\n  distinct_on?: Maybe<Array<Leaderboard_Public_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Leaderboard_Public_Order_By>>;\n  where?: Maybe<Leaderboard_Public_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootParticipantsArgs = {\n  distinct_on?: Maybe<Array<Participants_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Participants_Order_By>>;\n  where?: Maybe<Participants_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootParticipants_AggregateArgs = {\n  distinct_on?: Maybe<Array<Participants_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Participants_Order_By>>;\n  where?: Maybe<Participants_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootParticipants_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** subscription root */\nexport type Subscription_RootRolesArgs = {\n  distinct_on?: Maybe<Array<Roles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Roles_Order_By>>;\n  where?: Maybe<Roles_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootRoles_AggregateArgs = {\n  distinct_on?: Maybe<Array<Roles_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Roles_Order_By>>;\n  where?: Maybe<Roles_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootRoles_By_PkArgs = {\n  role: Scalars['String'];\n};\n\n/** subscription root */\nexport type Subscription_RootStatusArgs = {\n  distinct_on?: Maybe<Array<Status_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Status_Order_By>>;\n  where?: Maybe<Status_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootStatus_AggregateArgs = {\n  distinct_on?: Maybe<Array<Status_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Status_Order_By>>;\n  where?: Maybe<Status_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootStatus_By_PkArgs = {\n  status: Scalars['String'];\n};\n\n/** subscription root */\nexport type Subscription_RootTeamsArgs = {\n  distinct_on?: Maybe<Array<Teams_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Order_By>>;\n  where?: Maybe<Teams_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootTeams_AggregateArgs = {\n  distinct_on?: Maybe<Array<Teams_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Order_By>>;\n  where?: Maybe<Teams_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootTeams_By_PkArgs = {\n  id: Scalars['uuid'];\n};\n\n/** subscription root */\nexport type Subscription_RootTeams_ScoresArgs = {\n  distinct_on?: Maybe<Array<Teams_Scores_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Scores_Order_By>>;\n  where?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootTeams_Scores_AggregateArgs = {\n  distinct_on?: Maybe<Array<Teams_Scores_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Scores_Order_By>>;\n  where?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootTeams_Scores_By_PkArgs = {\n  game_id: Scalars['uuid'];\n  team_id: Scalars['uuid'];\n};\n\n/** subscription root */\nexport type Subscription_RootUsersArgs = {\n  distinct_on?: Maybe<Array<Users_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Users_Order_By>>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootUsers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Users_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Users_Order_By>>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n/** subscription root */\nexport type Subscription_RootUsers_By_PkArgs = {\n  auth0_id: Scalars['String'];\n};\n\n/** columns and relationships of \"teams\" */\nexport type Teams = {\n  __typename?: 'teams';\n  emergency_meeting: Scalars['Boolean'];\n  id: Scalars['uuid'];\n  motto?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  number: Scalars['Int'];\n  /** An array relationship */\n  participants: Array<Participants>;\n  /** An aggregated array relationship */\n  participants_aggregate: Participants_Aggregate;\n  picture_url?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  scores: Array<Teams_Scores>;\n  /** An aggregated array relationship */\n  scores_aggregate: Teams_Scores_Aggregate;\n};\n\n/** columns and relationships of \"teams\" */\nexport type TeamsParticipantsArgs = {\n  distinct_on?: Maybe<Array<Participants_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Participants_Order_By>>;\n  where?: Maybe<Participants_Bool_Exp>;\n};\n\n/** columns and relationships of \"teams\" */\nexport type TeamsParticipants_AggregateArgs = {\n  distinct_on?: Maybe<Array<Participants_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Participants_Order_By>>;\n  where?: Maybe<Participants_Bool_Exp>;\n};\n\n/** columns and relationships of \"teams\" */\nexport type TeamsScoresArgs = {\n  distinct_on?: Maybe<Array<Teams_Scores_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Scores_Order_By>>;\n  where?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** columns and relationships of \"teams\" */\nexport type TeamsScores_AggregateArgs = {\n  distinct_on?: Maybe<Array<Teams_Scores_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Teams_Scores_Order_By>>;\n  where?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** aggregated selection of \"teams\" */\nexport type Teams_Aggregate = {\n  __typename?: 'teams_aggregate';\n  aggregate?: Maybe<Teams_Aggregate_Fields>;\n  nodes: Array<Teams>;\n};\n\n/** aggregate fields of \"teams\" */\nexport type Teams_Aggregate_Fields = {\n  __typename?: 'teams_aggregate_fields';\n  avg?: Maybe<Teams_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Teams_Max_Fields>;\n  min?: Maybe<Teams_Min_Fields>;\n  stddev?: Maybe<Teams_Stddev_Fields>;\n  stddev_pop?: Maybe<Teams_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Teams_Stddev_Samp_Fields>;\n  sum?: Maybe<Teams_Sum_Fields>;\n  var_pop?: Maybe<Teams_Var_Pop_Fields>;\n  var_samp?: Maybe<Teams_Var_Samp_Fields>;\n  variance?: Maybe<Teams_Variance_Fields>;\n};\n\n/** aggregate fields of \"teams\" */\nexport type Teams_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Teams_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"teams\" */\nexport type Teams_Aggregate_Order_By = {\n  avg?: Maybe<Teams_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Teams_Max_Order_By>;\n  min?: Maybe<Teams_Min_Order_By>;\n  stddev?: Maybe<Teams_Stddev_Order_By>;\n  stddev_pop?: Maybe<Teams_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Teams_Stddev_Samp_Order_By>;\n  sum?: Maybe<Teams_Sum_Order_By>;\n  var_pop?: Maybe<Teams_Var_Pop_Order_By>;\n  var_samp?: Maybe<Teams_Var_Samp_Order_By>;\n  variance?: Maybe<Teams_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"teams\" */\nexport type Teams_Arr_Rel_Insert_Input = {\n  data: Array<Teams_Insert_Input>;\n  on_conflict?: Maybe<Teams_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Teams_Avg_Fields = {\n  __typename?: 'teams_avg_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"teams\" */\nexport type Teams_Avg_Order_By = {\n  number?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"teams\". All fields are combined with a logical 'AND'. */\nexport type Teams_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Teams_Bool_Exp>>>;\n  _not?: Maybe<Teams_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Teams_Bool_Exp>>>;\n  emergency_meeting?: Maybe<Boolean_Comparison_Exp>;\n  id?: Maybe<Uuid_Comparison_Exp>;\n  motto?: Maybe<String_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  number?: Maybe<Int_Comparison_Exp>;\n  participants?: Maybe<Participants_Bool_Exp>;\n  picture_url?: Maybe<String_Comparison_Exp>;\n  scores?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"teams\" */\nexport enum Teams_Constraint {\n  /** unique or primary key constraint */\n  TeamsNameKey = 'teams_name_key',\n  /** unique or primary key constraint */\n  TeamsPkey = 'teams_pkey'\n}\n\n/** input type for incrementing integer column in table \"teams\" */\nexport type Teams_Inc_Input = {\n  number?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"teams\" */\nexport type Teams_Insert_Input = {\n  emergency_meeting?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['uuid']>;\n  motto?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  number?: Maybe<Scalars['Int']>;\n  participants?: Maybe<Participants_Arr_Rel_Insert_Input>;\n  picture_url?: Maybe<Scalars['String']>;\n  scores?: Maybe<Teams_Scores_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Teams_Max_Fields = {\n  __typename?: 'teams_max_fields';\n  id?: Maybe<Scalars['uuid']>;\n  motto?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  number?: Maybe<Scalars['Int']>;\n  picture_url?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"teams\" */\nexport type Teams_Max_Order_By = {\n  id?: Maybe<Order_By>;\n  motto?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  number?: Maybe<Order_By>;\n  picture_url?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Teams_Min_Fields = {\n  __typename?: 'teams_min_fields';\n  id?: Maybe<Scalars['uuid']>;\n  motto?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  number?: Maybe<Scalars['Int']>;\n  picture_url?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"teams\" */\nexport type Teams_Min_Order_By = {\n  id?: Maybe<Order_By>;\n  motto?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  number?: Maybe<Order_By>;\n  picture_url?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"teams\" */\nexport type Teams_Mutation_Response = {\n  __typename?: 'teams_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Teams>;\n};\n\n/** input type for inserting object relation for remote table \"teams\" */\nexport type Teams_Obj_Rel_Insert_Input = {\n  data: Teams_Insert_Input;\n  on_conflict?: Maybe<Teams_On_Conflict>;\n};\n\n/** on conflict condition type for table \"teams\" */\nexport type Teams_On_Conflict = {\n  constraint: Teams_Constraint;\n  update_columns: Array<Teams_Update_Column>;\n  where?: Maybe<Teams_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"teams\" */\nexport type Teams_Order_By = {\n  emergency_meeting?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  motto?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  number?: Maybe<Order_By>;\n  participants_aggregate?: Maybe<Participants_Aggregate_Order_By>;\n  picture_url?: Maybe<Order_By>;\n  scores_aggregate?: Maybe<Teams_Scores_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: \"teams\" */\nexport type Teams_Pk_Columns_Input = {\n  id: Scalars['uuid'];\n};\n\n/** columns and relationships of \"teams_scores\" */\nexport type Teams_Scores = {\n  __typename?: 'teams_scores';\n  /** An object relationship */\n  game: Games;\n  game_id: Scalars['uuid'];\n  score: Scalars['Int'];\n  /** An object relationship */\n  team: Teams;\n  team_id: Scalars['uuid'];\n};\n\n/** aggregated selection of \"teams_scores\" */\nexport type Teams_Scores_Aggregate = {\n  __typename?: 'teams_scores_aggregate';\n  aggregate?: Maybe<Teams_Scores_Aggregate_Fields>;\n  nodes: Array<Teams_Scores>;\n};\n\n/** aggregate fields of \"teams_scores\" */\nexport type Teams_Scores_Aggregate_Fields = {\n  __typename?: 'teams_scores_aggregate_fields';\n  avg?: Maybe<Teams_Scores_Avg_Fields>;\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Teams_Scores_Max_Fields>;\n  min?: Maybe<Teams_Scores_Min_Fields>;\n  stddev?: Maybe<Teams_Scores_Stddev_Fields>;\n  stddev_pop?: Maybe<Teams_Scores_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Teams_Scores_Stddev_Samp_Fields>;\n  sum?: Maybe<Teams_Scores_Sum_Fields>;\n  var_pop?: Maybe<Teams_Scores_Var_Pop_Fields>;\n  var_samp?: Maybe<Teams_Scores_Var_Samp_Fields>;\n  variance?: Maybe<Teams_Scores_Variance_Fields>;\n};\n\n/** aggregate fields of \"teams_scores\" */\nexport type Teams_Scores_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Teams_Scores_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"teams_scores\" */\nexport type Teams_Scores_Aggregate_Order_By = {\n  avg?: Maybe<Teams_Scores_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Teams_Scores_Max_Order_By>;\n  min?: Maybe<Teams_Scores_Min_Order_By>;\n  stddev?: Maybe<Teams_Scores_Stddev_Order_By>;\n  stddev_pop?: Maybe<Teams_Scores_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Teams_Scores_Stddev_Samp_Order_By>;\n  sum?: Maybe<Teams_Scores_Sum_Order_By>;\n  var_pop?: Maybe<Teams_Scores_Var_Pop_Order_By>;\n  var_samp?: Maybe<Teams_Scores_Var_Samp_Order_By>;\n  variance?: Maybe<Teams_Scores_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"teams_scores\" */\nexport type Teams_Scores_Arr_Rel_Insert_Input = {\n  data: Array<Teams_Scores_Insert_Input>;\n  on_conflict?: Maybe<Teams_Scores_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Teams_Scores_Avg_Fields = {\n  __typename?: 'teams_scores_avg_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Avg_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"teams_scores\". All fields are combined with a logical 'AND'. */\nexport type Teams_Scores_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Teams_Scores_Bool_Exp>>>;\n  _not?: Maybe<Teams_Scores_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Teams_Scores_Bool_Exp>>>;\n  game?: Maybe<Games_Bool_Exp>;\n  game_id?: Maybe<Uuid_Comparison_Exp>;\n  score?: Maybe<Int_Comparison_Exp>;\n  team?: Maybe<Teams_Bool_Exp>;\n  team_id?: Maybe<Uuid_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"teams_scores\" */\nexport enum Teams_Scores_Constraint {\n  /** unique or primary key constraint */\n  TeamsScoresPkey = 'teams_scores_pkey'\n}\n\n/** input type for incrementing integer column in table \"teams_scores\" */\nexport type Teams_Scores_Inc_Input = {\n  score?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"teams_scores\" */\nexport type Teams_Scores_Insert_Input = {\n  game?: Maybe<Games_Obj_Rel_Insert_Input>;\n  game_id?: Maybe<Scalars['uuid']>;\n  score?: Maybe<Scalars['Int']>;\n  team?: Maybe<Teams_Obj_Rel_Insert_Input>;\n  team_id?: Maybe<Scalars['uuid']>;\n};\n\n/** aggregate max on columns */\nexport type Teams_Scores_Max_Fields = {\n  __typename?: 'teams_scores_max_fields';\n  game_id?: Maybe<Scalars['uuid']>;\n  score?: Maybe<Scalars['Int']>;\n  team_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by max() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Max_Order_By = {\n  game_id?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n  team_id?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Teams_Scores_Min_Fields = {\n  __typename?: 'teams_scores_min_fields';\n  game_id?: Maybe<Scalars['uuid']>;\n  score?: Maybe<Scalars['Int']>;\n  team_id?: Maybe<Scalars['uuid']>;\n};\n\n/** order by min() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Min_Order_By = {\n  game_id?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n  team_id?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"teams_scores\" */\nexport type Teams_Scores_Mutation_Response = {\n  __typename?: 'teams_scores_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Teams_Scores>;\n};\n\n/** input type for inserting object relation for remote table \"teams_scores\" */\nexport type Teams_Scores_Obj_Rel_Insert_Input = {\n  data: Teams_Scores_Insert_Input;\n  on_conflict?: Maybe<Teams_Scores_On_Conflict>;\n};\n\n/** on conflict condition type for table \"teams_scores\" */\nexport type Teams_Scores_On_Conflict = {\n  constraint: Teams_Scores_Constraint;\n  update_columns: Array<Teams_Scores_Update_Column>;\n  where?: Maybe<Teams_Scores_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"teams_scores\" */\nexport type Teams_Scores_Order_By = {\n  game?: Maybe<Games_Order_By>;\n  game_id?: Maybe<Order_By>;\n  score?: Maybe<Order_By>;\n  team?: Maybe<Teams_Order_By>;\n  team_id?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: \"teams_scores\" */\nexport type Teams_Scores_Pk_Columns_Input = {\n  game_id: Scalars['uuid'];\n  team_id: Scalars['uuid'];\n};\n\n/** select columns of table \"teams_scores\" */\nexport enum Teams_Scores_Select_Column {\n  /** column name */\n  GameId = 'game_id',\n  /** column name */\n  Score = 'score',\n  /** column name */\n  TeamId = 'team_id'\n}\n\n/** input type for updating data in table \"teams_scores\" */\nexport type Teams_Scores_Set_Input = {\n  game_id?: Maybe<Scalars['uuid']>;\n  score?: Maybe<Scalars['Int']>;\n  team_id?: Maybe<Scalars['uuid']>;\n};\n\n/** aggregate stddev on columns */\nexport type Teams_Scores_Stddev_Fields = {\n  __typename?: 'teams_scores_stddev_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Stddev_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Teams_Scores_Stddev_Pop_Fields = {\n  __typename?: 'teams_scores_stddev_pop_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Stddev_Pop_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Teams_Scores_Stddev_Samp_Fields = {\n  __typename?: 'teams_scores_stddev_samp_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Stddev_Samp_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Teams_Scores_Sum_Fields = {\n  __typename?: 'teams_scores_sum_fields';\n  score?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Sum_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** update columns of table \"teams_scores\" */\nexport enum Teams_Scores_Update_Column {\n  /** column name */\n  GameId = 'game_id',\n  /** column name */\n  Score = 'score',\n  /** column name */\n  TeamId = 'team_id'\n}\n\n/** aggregate var_pop on columns */\nexport type Teams_Scores_Var_Pop_Fields = {\n  __typename?: 'teams_scores_var_pop_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Var_Pop_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Teams_Scores_Var_Samp_Fields = {\n  __typename?: 'teams_scores_var_samp_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Var_Samp_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Teams_Scores_Variance_Fields = {\n  __typename?: 'teams_scores_variance_fields';\n  score?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"teams_scores\" */\nexport type Teams_Scores_Variance_Order_By = {\n  score?: Maybe<Order_By>;\n};\n\n/** select columns of table \"teams\" */\nexport enum Teams_Select_Column {\n  /** column name */\n  EmergencyMeeting = 'emergency_meeting',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Motto = 'motto',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Number = 'number',\n  /** column name */\n  PictureUrl = 'picture_url'\n}\n\n/** input type for updating data in table \"teams\" */\nexport type Teams_Set_Input = {\n  emergency_meeting?: Maybe<Scalars['Boolean']>;\n  id?: Maybe<Scalars['uuid']>;\n  motto?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  number?: Maybe<Scalars['Int']>;\n  picture_url?: Maybe<Scalars['String']>;\n};\n\n/** aggregate stddev on columns */\nexport type Teams_Stddev_Fields = {\n  __typename?: 'teams_stddev_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"teams\" */\nexport type Teams_Stddev_Order_By = {\n  number?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Teams_Stddev_Pop_Fields = {\n  __typename?: 'teams_stddev_pop_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"teams\" */\nexport type Teams_Stddev_Pop_Order_By = {\n  number?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Teams_Stddev_Samp_Fields = {\n  __typename?: 'teams_stddev_samp_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"teams\" */\nexport type Teams_Stddev_Samp_Order_By = {\n  number?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Teams_Sum_Fields = {\n  __typename?: 'teams_sum_fields';\n  number?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"teams\" */\nexport type Teams_Sum_Order_By = {\n  number?: Maybe<Order_By>;\n};\n\n/** update columns of table \"teams\" */\nexport enum Teams_Update_Column {\n  /** column name */\n  EmergencyMeeting = 'emergency_meeting',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Motto = 'motto',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  Number = 'number',\n  /** column name */\n  PictureUrl = 'picture_url'\n}\n\n/** aggregate var_pop on columns */\nexport type Teams_Var_Pop_Fields = {\n  __typename?: 'teams_var_pop_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"teams\" */\nexport type Teams_Var_Pop_Order_By = {\n  number?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Teams_Var_Samp_Fields = {\n  __typename?: 'teams_var_samp_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"teams\" */\nexport type Teams_Var_Samp_Order_By = {\n  number?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Teams_Variance_Fields = {\n  __typename?: 'teams_variance_fields';\n  number?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"teams\" */\nexport type Teams_Variance_Order_By = {\n  number?: Maybe<Order_By>;\n};\n\n/** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\n/** columns and relationships of \"users\" */\nexport type Users = {\n  __typename?: 'users';\n  admin: Scalars['Boolean'];\n  auth0_id: Scalars['String'];\n  created_at: Scalars['timestamptz'];\n  /** An object relationship */\n  participant?: Maybe<Participants>;\n};\n\n/** aggregated selection of \"users\" */\nexport type Users_Aggregate = {\n  __typename?: 'users_aggregate';\n  aggregate?: Maybe<Users_Aggregate_Fields>;\n  nodes: Array<Users>;\n};\n\n/** aggregate fields of \"users\" */\nexport type Users_Aggregate_Fields = {\n  __typename?: 'users_aggregate_fields';\n  count?: Maybe<Scalars['Int']>;\n  max?: Maybe<Users_Max_Fields>;\n  min?: Maybe<Users_Min_Fields>;\n};\n\n/** aggregate fields of \"users\" */\nexport type Users_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Users_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"users\" */\nexport type Users_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Users_Max_Order_By>;\n  min?: Maybe<Users_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"users\" */\nexport type Users_Arr_Rel_Insert_Input = {\n  data: Array<Users_Insert_Input>;\n  on_conflict?: Maybe<Users_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'. */\nexport type Users_Bool_Exp = {\n  _and?: Maybe<Array<Maybe<Users_Bool_Exp>>>;\n  _not?: Maybe<Users_Bool_Exp>;\n  _or?: Maybe<Array<Maybe<Users_Bool_Exp>>>;\n  admin?: Maybe<Boolean_Comparison_Exp>;\n  auth0_id?: Maybe<String_Comparison_Exp>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  participant?: Maybe<Participants_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"users\" */\nexport enum Users_Constraint {\n  /** unique or primary key constraint */\n  UsersPkey = 'users_pkey'\n}\n\n/** input type for inserting data into table \"users\" */\nexport type Users_Insert_Input = {\n  admin?: Maybe<Scalars['Boolean']>;\n  auth0_id?: Maybe<Scalars['String']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n  participant?: Maybe<Participants_Obj_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Users_Max_Fields = {\n  __typename?: 'users_max_fields';\n  auth0_id?: Maybe<Scalars['String']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by max() on columns of table \"users\" */\nexport type Users_Max_Order_By = {\n  auth0_id?: Maybe<Order_By>;\n  created_at?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Users_Min_Fields = {\n  __typename?: 'users_min_fields';\n  auth0_id?: Maybe<Scalars['String']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** order by min() on columns of table \"users\" */\nexport type Users_Min_Order_By = {\n  auth0_id?: Maybe<Order_By>;\n  created_at?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"users\" */\nexport type Users_Mutation_Response = {\n  __typename?: 'users_mutation_response';\n  /** number of affected rows by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data of the affected rows by the mutation */\n  returning: Array<Users>;\n};\n\n/** input type for inserting object relation for remote table \"users\" */\nexport type Users_Obj_Rel_Insert_Input = {\n  data: Users_Insert_Input;\n  on_conflict?: Maybe<Users_On_Conflict>;\n};\n\n/** on conflict condition type for table \"users\" */\nexport type Users_On_Conflict = {\n  constraint: Users_Constraint;\n  update_columns: Array<Users_Update_Column>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n/** ordering options when selecting data from \"users\" */\nexport type Users_Order_By = {\n  admin?: Maybe<Order_By>;\n  auth0_id?: Maybe<Order_By>;\n  created_at?: Maybe<Order_By>;\n  participant?: Maybe<Participants_Order_By>;\n};\n\n/** primary key columns input for table: \"users\" */\nexport type Users_Pk_Columns_Input = {\n  auth0_id: Scalars['String'];\n};\n\n/** select columns of table \"users\" */\nexport enum Users_Select_Column {\n  /** column name */\n  Admin = 'admin',\n  /** column name */\n  Auth0Id = 'auth0_id',\n  /** column name */\n  CreatedAt = 'created_at'\n}\n\n/** input type for updating data in table \"users\" */\nexport type Users_Set_Input = {\n  admin?: Maybe<Scalars['Boolean']>;\n  auth0_id?: Maybe<Scalars['String']>;\n  created_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** update columns of table \"users\" */\nexport enum Users_Update_Column {\n  /** column name */\n  Admin = 'admin',\n  /** column name */\n  Auth0Id = 'auth0_id',\n  /** column name */\n  CreatedAt = 'created_at'\n}\n\n/** expression to compare columns of type uuid. All fields are combined with logical 'AND'. */\nexport type Uuid_Comparison_Exp = {\n  _eq?: Maybe<Scalars['uuid']>;\n  _gt?: Maybe<Scalars['uuid']>;\n  _gte?: Maybe<Scalars['uuid']>;\n  _in?: Maybe<Array<Scalars['uuid']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['uuid']>;\n  _lte?: Maybe<Scalars['uuid']>;\n  _neq?: Maybe<Scalars['uuid']>;\n  _nin?: Maybe<Array<Scalars['uuid']>>;\n};\n\nexport type UpdateParticipantDetailsMutationVariables = Exact<{\n  description: Scalars['String'];\n  name: Scalars['String'];\n  auth0_id: Scalars['String'];\n}>;\n\nexport type UpdateParticipantDetailsMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'participants' }\n      & Pick<Participants, 'description' | 'name' | 'role' | 'team_id' | 'user_id' | 'score' | 'contribution' | 'status' | 'emergency_vote' | 'picometer_hint' | 'viewfinder_hint'>\n      & { team: (\n        { __typename?: 'teams' }\n        & Pick<Teams, 'motto' | 'name' | 'picture_url' | 'emergency_meeting'>\n        & { scores: Array<(\n          { __typename?: 'teams_scores' }\n          & Pick<Teams_Scores, 'score'>\n        )>; }\n      ); }\n    )>; }\n  )>; }\n);\n\nexport type UpdateGameScoreMutationVariables = Exact<{\n  game_id: Scalars['uuid'];\n  score: Scalars['Int'];\n  team_id: Scalars['uuid'];\n}>;\n\nexport type UpdateGameScoreMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_teams_scores?: Maybe<(\n    { __typename?: 'teams_scores_mutation_response' }\n    & Pick<Teams_Scores_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type SubmitContestMutationVariables = Exact<{\n  submission_url: Scalars['String'];\n  participant_id: Scalars['uuid'];\n  auth0_id: Scalars['String'];\n}>;\n\nexport type SubmitContestMutation = (\n  { __typename?: 'mutation_root' }\n  & { insert_contest?: Maybe<(\n    { __typename?: 'contest_mutation_response' }\n    & Pick<Contest_Mutation_Response, 'affected_rows'>\n  )>; update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type SubmitContestVoteMutationVariables = Exact<{\n  participant_id: Scalars['uuid'];\n  auth0_id: Scalars['String'];\n}>;\n\nexport type SubmitContestVoteMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_contest?: Maybe<(\n    { __typename?: 'contest_mutation_response' }\n    & Pick<Contest_Mutation_Response, 'affected_rows'>\n  )>; update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type SubmissionControlMutationVariables = Exact<{\n  submission: Scalars['Boolean'];\n  auth0_id: Scalars['String'];\n}>;\n\nexport type SubmissionControlMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type VotingControlMutationVariables = Exact<{\n  vote: Scalars['Boolean'];\n}>;\n\nexport type VotingControlMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type UpdateParticipantsScoreMutationVariables = Exact<{\n  participant_id: Scalars['uuid'];\n  score: Scalars['Int'];\n}>;\n\nexport type UpdateParticipantsScoreMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type AddScoreToTeamMutationVariables = Exact<{\n  crewmate: Scalars['Int'];\n  team: Scalars['Int'];\n  auth0_id: Scalars['String'];\n}>;\n\nexport type AddScoreToTeamMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'participants' }\n      & Pick<Participants, 'description' | 'name' | 'role' | 'team_id' | 'user_id' | 'score' | 'contribution' | 'status' | 'emergency_vote' | 'picometer_hint' | 'viewfinder_hint'>\n      & { team: (\n        { __typename?: 'teams' }\n        & Pick<Teams, 'motto' | 'name' | 'picture_url'>\n        & { scores: Array<(\n          { __typename?: 'teams_scores' }\n          & Pick<Teams_Scores, 'score'>\n        )>; }\n      ); }\n    )>; }\n  )>; update_teams_scores?: Maybe<(\n    { __typename?: 'teams_scores_mutation_response' }\n    & Pick<Teams_Scores_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type UpdateLeadershipboardStateMutationVariables = Exact<{\n  leaderboard: Scalars['Boolean'];\n}>;\n\nexport type UpdateLeadershipboardStateMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_control?: Maybe<(\n    { __typename?: 'control_mutation_response' }\n    & Pick<Control_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type UpdateContestStateMutationVariables = Exact<{\n  submission: Scalars['Boolean'];\n  vote: Scalars['Boolean'];\n}>;\n\nexport type UpdateContestStateMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_control?: Maybe<(\n    { __typename?: 'control_mutation_response' }\n    & Pick<Control_Mutation_Response, 'affected_rows'>\n  )>; update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type EmergencyMeetingVoteMutationVariables = Exact<{\n  participant_id: Scalars['String'];\n  user_id: Scalars['String'];\n}>;\n\nexport type EmergencyMeetingVoteMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; update_my_vote?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type UpdateParticipantsPicometerMutationVariables = Exact<{\n  participant_id: Scalars['uuid'];\n  picometer_hint: Scalars['String'];\n}>;\n\nexport type UpdateParticipantsPicometerMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type UpdateParticipantsViewfinderMutationVariables = Exact<{\n  participant_id: Scalars['uuid'];\n  viewfinder_hint: Scalars['String'];\n}>;\n\nexport type UpdateParticipantsViewfinderMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type BuyPicometerMutationVariables = Exact<{\n  auth0_id: Scalars['String'];\n}>;\n\nexport type BuyPicometerMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'participants' }\n      & Pick<Participants, 'score' | 'picometer' | 'viewfinder'>\n    )>; }\n  )>; }\n);\n\nexport type BuyViewfinderMutationVariables = Exact<{\n  auth0_id: Scalars['String'];\n}>;\n\nexport type BuyViewfinderMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n    & { returning: Array<(\n      { __typename?: 'participants' }\n      & Pick<Participants, 'score' | 'picometer' | 'viewfinder'>\n    )>; }\n  )>; }\n);\n\nexport type KillParticipantsMutationVariables = Exact<{\n  participant_id: Scalars['uuid'];\n  team_id: Scalars['uuid'];\n}>;\n\nexport type KillParticipantsMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; update_teams?: Maybe<(\n    { __typename?: 'teams_mutation_response' }\n    & Pick<Teams_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type EmergencyMeetingControlMutationVariables = Exact<{\n  team_id: Scalars['uuid'];\n  emergency_meeting: Scalars['Boolean'];\n}>;\n\nexport type EmergencyMeetingControlMutation = (\n  { __typename?: 'mutation_root' }\n  & { update_teams?: Maybe<(\n    { __typename?: 'teams_mutation_response' }\n    & Pick<Teams_Mutation_Response, 'affected_rows'>\n  )>; update_participants?: Maybe<(\n    { __typename?: 'participants_mutation_response' }\n    & Pick<Participants_Mutation_Response, 'affected_rows'>\n  )>; }\n);\n\nexport type GetOneParticipantDetailsQueryVariables = Exact<{\n  auth0_id: Scalars['String'];\n}>;\n\nexport type GetOneParticipantDetailsQuery = (\n  { __typename?: 'query_root' }\n  & { participants: Array<(\n    { __typename?: 'participants' }\n    & Pick<Participants, 'description' | 'name' | 'role' | 'team_id' | 'user_id' | 'score' | 'contribution' | 'status' | 'viewfinder_hint' | 'picometer_hint'>\n    & { team: (\n      { __typename?: 'teams' }\n      & Pick<Teams, 'motto' | 'name' | 'picture_url' | 'emergency_meeting'>\n      & { scores: Array<(\n        { __typename?: 'teams_scores' }\n        & Pick<Teams_Scores, 'score'>\n      )>; }\n    ); }\n  )>; }\n);\n\nexport type GetContestSubmissionQueryVariables = Exact<{\n  limit: Scalars['Int'];\n  offset: Scalars['Int'];\n}>;\n\nexport type GetContestSubmissionQuery = (\n  { __typename?: 'query_root' }\n  & { contest: Array<(\n    { __typename?: 'contest' }\n    & Pick<Contest, 'submission_url' | 'participant_id'>\n  )>; }\n);\n\nexport type GetParticipantVotingDetailsQueryVariables = Exact<{\n  auth0_id: Scalars['String'];\n}>;\n\nexport type GetParticipantVotingDetailsQuery = (\n  { __typename?: 'query_root' }\n  & { participants: Array<(\n    { __typename?: 'participants' }\n    & Pick<Participants, 'id' | 'submission' | 'vote'>\n  )>; }\n);\n\nexport type GetControlStateQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type GetControlStateQuery = (\n  { __typename?: 'query_root' }\n  & { control: Array<(\n    { __typename?: 'control' }\n    & Pick<Control, 'vote' | 'submission' | 'leaderboard'>\n  )>; }\n);\n\nexport type GetArtifactsDetailsQueryVariables = Exact<{\n  auth0_id: Scalars['String'];\n}>;\n\nexport type GetArtifactsDetailsQuery = (\n  { __typename?: 'query_root' }\n  & { participants: Array<(\n    { __typename?: 'participants' }\n    & Pick<Participants, 'viewfinder' | 'picometer' | 'score'>\n  )>; }\n);\n\nexport type SubscribePublicLeaderboardSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type SubscribePublicLeaderboardSubscription = (\n  { __typename?: 'subscription_root' }\n  & { leaderboard_public: Array<(\n    { __typename?: 'leaderboard_public' }\n    & Pick<Leaderboard_Public, 'score' | 'name' | 'picture_url'>\n  )>; }\n);\n\nexport type SubscibeToAllGamesSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type SubscibeToAllGamesSubscription = (\n  { __typename?: 'subscription_root' }\n  & { games: Array<(\n    { __typename?: 'games' }\n    & Pick<Games, 'game_name' | 'id'>\n    & { teams_scores: Array<(\n      { __typename?: 'teams_scores' }\n      & Pick<Teams_Scores, 'score' | 'team_id'>\n      & { team: (\n        { __typename?: 'teams' }\n        & Pick<Teams, 'name'>\n      ); }\n    )>; }\n  )>; }\n);\n\nexport type GetParticipantsScoreSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type GetParticipantsScoreSubscription = (\n  { __typename?: 'subscription_root' }\n  & { teams: Array<(\n    { __typename?: 'teams' }\n    & Pick<Teams, 'name' | 'id'>\n    & { participants: Array<(\n      { __typename?: 'participants' }\n      & Pick<Participants, 'name' | 'score' | 'id'>\n    )>; }\n  )>; }\n);\n\nexport type EmergencyMeetingDetailsSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type EmergencyMeetingDetailsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { participants: Array<(\n    { __typename?: 'participants' }\n    & Pick<Participants, 'emergency_vote' | 'imposter_vote_count' | 'name' | 'status' | 'user_id'>\n    & { team: (\n      { __typename?: 'teams' }\n      & Pick<Teams, 'number' | 'picture_url'>\n    ); }\n  )>; }\n);\n\nexport type GetEmergencyVotingStatusSubscriptionVariables = Exact<{\n  auth0_id: Scalars['String'];\n}>;\n\nexport type GetEmergencyVotingStatusSubscription = (\n  { __typename?: 'subscription_root' }\n  & { participants: Array<(\n    { __typename?: 'participants' }\n    & Pick<Participants, 'emergency_vote'>\n  )>; }\n);\n\nexport type GetParticipantsPicometerDetailsSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type GetParticipantsPicometerDetailsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { teams: Array<(\n    { __typename?: 'teams' }\n    & Pick<Teams, 'name'>\n    & { participants: Array<(\n      { __typename?: 'participants' }\n      & Pick<Participants, 'id' | 'name'>\n    )>; }\n  )>; }\n);\n\nexport type GetParticipantsViewfinderDetailsSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type GetParticipantsViewfinderDetailsSubscription = (\n  { __typename?: 'subscription_root' }\n  & { teams: Array<(\n    { __typename?: 'teams' }\n    & Pick<Teams, 'name'>\n    & { participants: Array<(\n      { __typename?: 'participants' }\n      & Pick<Participants, 'id' | 'name'>\n    )>; }\n  )>; }\n);\n\nexport type GetEmergencyMeetingStatusSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type GetEmergencyMeetingStatusSubscription = (\n  { __typename?: 'subscription_root' }\n  & { teams: Array<(\n    { __typename?: 'teams' }\n    & Pick<Teams, 'id' | 'name' | 'emergency_meeting' | 'number'>\n    & { participants: Array<(\n      { __typename?: 'participants' }\n      & Pick<Participants, 'id' | 'name' | 'imposter_vote_count'>\n    )>; }\n  )>; }\n);\n\nexport type ContestSubmissionLiveResultSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type ContestSubmissionLiveResultSubscription = (\n  { __typename?: 'subscription_root' }\n  & { participants: Array<(\n    { __typename?: 'participants' }\n    & Pick<Participants, 'name'>\n    & { team: (\n      { __typename?: 'teams' }\n      & Pick<Teams, 'picture_url'>\n    ); contest_submission?: Maybe<(\n      { __typename?: 'contest' }\n      & Pick<Contest, 'vote_count' | 'submission_url'>\n    )>; }\n  )>; }\n);\n\nexport type GetEmergencyMeetingResultSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type GetEmergencyMeetingResultSubscription = (\n  { __typename?: 'subscription_root' }\n  & { participants: Array<(\n    { __typename?: 'participants' }\n    & Pick<Participants, 'name' | 'role'>\n  )>; }\n);\n\nexport const UpdateParticipantDetailsDocument = gql`\n    mutation UpdateParticipantDetails($description: String!, $name: String!, $auth0_id: String!) {\n  update_participants(\n    where: {user_id: {_eq: $auth0_id}}\n    _set: {description: $description, name: $name}\n  ) {\n    affected_rows\n    returning {\n      description\n      name\n      role\n      team_id\n      user_id\n      score\n      contribution\n      status\n      emergency_vote\n      picometer_hint\n      viewfinder_hint\n      team {\n        motto\n        name\n        picture_url\n        emergency_meeting\n        scores {\n          score\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useUpdateParticipantDetailsMutation__\n *\n * To run a mutation, you first call `useUpdateParticipantDetailsMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useUpdateParticipantDetailsMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useUpdateParticipantDetailsMutation({\n *   variables: {\n *     description: // value for 'description'\n *     name: // value for 'name'\n *     auth0_id: // value for 'auth0_id'\n *   },\n * });\n */\nexport function useUpdateParticipantDetailsMutation(options: VueApolloComposable.UseMutationOptions<UpdateParticipantDetailsMutation, UpdateParticipantDetailsMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UpdateParticipantDetailsMutation, UpdateParticipantDetailsMutationVariables>>) {\n  return VueApolloComposable.useMutation<UpdateParticipantDetailsMutation, UpdateParticipantDetailsMutationVariables>(UpdateParticipantDetailsDocument, options);\n}\nexport type UpdateParticipantDetailsMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UpdateParticipantDetailsMutation, UpdateParticipantDetailsMutationVariables>;\nexport const UpdateGameScoreDocument = gql`\n    mutation UpdateGameScore($game_id: uuid!, $score: Int!, $team_id: uuid!) {\n  update_teams_scores(\n    where: {game_id: {_eq: $game_id}, team_id: {_eq: $team_id}}\n    _inc: {score: $score}\n  ) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useUpdateGameScoreMutation__\n *\n * To run a mutation, you first call `useUpdateGameScoreMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useUpdateGameScoreMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useUpdateGameScoreMutation({\n *   variables: {\n *     game_id: // value for 'game_id'\n *     score: // value for 'score'\n *     team_id: // value for 'team_id'\n *   },\n * });\n */\nexport function useUpdateGameScoreMutation(options: VueApolloComposable.UseMutationOptions<UpdateGameScoreMutation, UpdateGameScoreMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UpdateGameScoreMutation, UpdateGameScoreMutationVariables>>) {\n  return VueApolloComposable.useMutation<UpdateGameScoreMutation, UpdateGameScoreMutationVariables>(UpdateGameScoreDocument, options);\n}\nexport type UpdateGameScoreMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UpdateGameScoreMutation, UpdateGameScoreMutationVariables>;\nexport const SubmitContestDocument = gql`\n    mutation SubmitContest($submission_url: String!, $participant_id: uuid!, $auth0_id: String!) {\n  insert_contest(\n    objects: {submission_url: $submission_url, participant_id: $participant_id}\n  ) {\n    affected_rows\n  }\n  update_participants(\n    where: {user_id: {_eq: $auth0_id}}\n    _set: {submission: false}\n  ) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useSubmitContestMutation__\n *\n * To run a mutation, you first call `useSubmitContestMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useSubmitContestMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useSubmitContestMutation({\n *   variables: {\n *     submission_url: // value for 'submission_url'\n *     participant_id: // value for 'participant_id'\n *     auth0_id: // value for 'auth0_id'\n *   },\n * });\n */\nexport function useSubmitContestMutation(options: VueApolloComposable.UseMutationOptions<SubmitContestMutation, SubmitContestMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<SubmitContestMutation, SubmitContestMutationVariables>>) {\n  return VueApolloComposable.useMutation<SubmitContestMutation, SubmitContestMutationVariables>(SubmitContestDocument, options);\n}\nexport type SubmitContestMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<SubmitContestMutation, SubmitContestMutationVariables>;\nexport const SubmitContestVoteDocument = gql`\n    mutation SubmitContestVote($participant_id: uuid!, $auth0_id: String!) {\n  update_contest(\n    where: {participant_id: {_eq: $participant_id}}\n    _inc: {vote_count: 1}\n  ) {\n    affected_rows\n  }\n  update_participants(where: {user_id: {_eq: $auth0_id}}, _set: {vote: false}) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useSubmitContestVoteMutation__\n *\n * To run a mutation, you first call `useSubmitContestVoteMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useSubmitContestVoteMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useSubmitContestVoteMutation({\n *   variables: {\n *     participant_id: // value for 'participant_id'\n *     auth0_id: // value for 'auth0_id'\n *   },\n * });\n */\nexport function useSubmitContestVoteMutation(options: VueApolloComposable.UseMutationOptions<SubmitContestVoteMutation, SubmitContestVoteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<SubmitContestVoteMutation, SubmitContestVoteMutationVariables>>) {\n  return VueApolloComposable.useMutation<SubmitContestVoteMutation, SubmitContestVoteMutationVariables>(SubmitContestVoteDocument, options);\n}\nexport type SubmitContestVoteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<SubmitContestVoteMutation, SubmitContestVoteMutationVariables>;\nexport const SubmissionControlDocument = gql`\n    mutation SubmissionControl($submission: Boolean!, $auth0_id: String!) {\n  update_participants(where: {}, _set: {submission: $submission}) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useSubmissionControlMutation__\n *\n * To run a mutation, you first call `useSubmissionControlMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useSubmissionControlMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useSubmissionControlMutation({\n *   variables: {\n *     submission: // value for 'submission'\n *     auth0_id: // value for 'auth0_id'\n *   },\n * });\n */\nexport function useSubmissionControlMutation(options: VueApolloComposable.UseMutationOptions<SubmissionControlMutation, SubmissionControlMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<SubmissionControlMutation, SubmissionControlMutationVariables>>) {\n  return VueApolloComposable.useMutation<SubmissionControlMutation, SubmissionControlMutationVariables>(SubmissionControlDocument, options);\n}\nexport type SubmissionControlMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<SubmissionControlMutation, SubmissionControlMutationVariables>;\nexport const VotingControlDocument = gql`\n    mutation VotingControl($vote: Boolean!) {\n  update_participants(where: {}, _set: {vote: $vote}) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useVotingControlMutation__\n *\n * To run a mutation, you first call `useVotingControlMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useVotingControlMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useVotingControlMutation({\n *   variables: {\n *     vote: // value for 'vote'\n *   },\n * });\n */\nexport function useVotingControlMutation(options: VueApolloComposable.UseMutationOptions<VotingControlMutation, VotingControlMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<VotingControlMutation, VotingControlMutationVariables>>) {\n  return VueApolloComposable.useMutation<VotingControlMutation, VotingControlMutationVariables>(VotingControlDocument, options);\n}\nexport type VotingControlMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<VotingControlMutation, VotingControlMutationVariables>;\nexport const UpdateParticipantsScoreDocument = gql`\n    mutation UpdateParticipantsScore($participant_id: uuid!, $score: Int!) {\n  update_participants(where: {id: {_eq: $participant_id}}, _inc: {score: $score}) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useUpdateParticipantsScoreMutation__\n *\n * To run a mutation, you first call `useUpdateParticipantsScoreMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useUpdateParticipantsScoreMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useUpdateParticipantsScoreMutation({\n *   variables: {\n *     participant_id: // value for 'participant_id'\n *     score: // value for 'score'\n *   },\n * });\n */\nexport function useUpdateParticipantsScoreMutation(options: VueApolloComposable.UseMutationOptions<UpdateParticipantsScoreMutation, UpdateParticipantsScoreMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UpdateParticipantsScoreMutation, UpdateParticipantsScoreMutationVariables>>) {\n  return VueApolloComposable.useMutation<UpdateParticipantsScoreMutation, UpdateParticipantsScoreMutationVariables>(UpdateParticipantsScoreDocument, options);\n}\nexport type UpdateParticipantsScoreMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UpdateParticipantsScoreMutation, UpdateParticipantsScoreMutationVariables>;\nexport const AddScoreToTeamDocument = gql`\n    mutation AddScoreToTeam($crewmate: Int!, $team: Int!, $auth0_id: String!) {\n  update_participants(\n    where: {user_id: {_eq: $auth0_id}}\n    _inc: {score: $crewmate, contribution: $team}\n  ) {\n    affected_rows\n    returning {\n      description\n      name\n      role\n      team_id\n      user_id\n      score\n      contribution\n      status\n      emergency_vote\n      picometer_hint\n      viewfinder_hint\n      team {\n        motto\n        name\n        picture_url\n        scores {\n          score\n        }\n      }\n    }\n  }\n  update_teams_scores(where: {}, _inc: {score: $team}) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useAddScoreToTeamMutation__\n *\n * To run a mutation, you first call `useAddScoreToTeamMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useAddScoreToTeamMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useAddScoreToTeamMutation({\n *   variables: {\n *     crewmate: // value for 'crewmate'\n *     team: // value for 'team'\n *     auth0_id: // value for 'auth0_id'\n *   },\n * });\n */\nexport function useAddScoreToTeamMutation(options: VueApolloComposable.UseMutationOptions<AddScoreToTeamMutation, AddScoreToTeamMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<AddScoreToTeamMutation, AddScoreToTeamMutationVariables>>) {\n  return VueApolloComposable.useMutation<AddScoreToTeamMutation, AddScoreToTeamMutationVariables>(AddScoreToTeamDocument, options);\n}\nexport type AddScoreToTeamMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<AddScoreToTeamMutation, AddScoreToTeamMutationVariables>;\nexport const UpdateLeadershipboardStateDocument = gql`\n    mutation UpdateLeadershipboardState($leaderboard: Boolean!) {\n  update_control(where: {}, _set: {leaderboard: $leaderboard}) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useUpdateLeadershipboardStateMutation__\n *\n * To run a mutation, you first call `useUpdateLeadershipboardStateMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useUpdateLeadershipboardStateMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useUpdateLeadershipboardStateMutation({\n *   variables: {\n *     leaderboard: // value for 'leaderboard'\n *   },\n * });\n */\nexport function useUpdateLeadershipboardStateMutation(options: VueApolloComposable.UseMutationOptions<UpdateLeadershipboardStateMutation, UpdateLeadershipboardStateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UpdateLeadershipboardStateMutation, UpdateLeadershipboardStateMutationVariables>>) {\n  return VueApolloComposable.useMutation<UpdateLeadershipboardStateMutation, UpdateLeadershipboardStateMutationVariables>(UpdateLeadershipboardStateDocument, options);\n}\nexport type UpdateLeadershipboardStateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UpdateLeadershipboardStateMutation, UpdateLeadershipboardStateMutationVariables>;\nexport const UpdateContestStateDocument = gql`\n    mutation UpdateContestState($submission: Boolean!, $vote: Boolean!) {\n  update_control(where: {}, _set: {submission: $submission, vote: $vote}) {\n    affected_rows\n  }\n  update_participants(where: {}, _set: {submission: $submission, vote: $vote}) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useUpdateContestStateMutation__\n *\n * To run a mutation, you first call `useUpdateContestStateMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useUpdateContestStateMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useUpdateContestStateMutation({\n *   variables: {\n *     submission: // value for 'submission'\n *     vote: // value for 'vote'\n *   },\n * });\n */\nexport function useUpdateContestStateMutation(options: VueApolloComposable.UseMutationOptions<UpdateContestStateMutation, UpdateContestStateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UpdateContestStateMutation, UpdateContestStateMutationVariables>>) {\n  return VueApolloComposable.useMutation<UpdateContestStateMutation, UpdateContestStateMutationVariables>(UpdateContestStateDocument, options);\n}\nexport type UpdateContestStateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UpdateContestStateMutation, UpdateContestStateMutationVariables>;\nexport const EmergencyMeetingVoteDocument = gql`\n    mutation EmergencyMeetingVote($participant_id: String!, $user_id: String!) {\n  update_participants: update_participants(\n    where: {user_id: {_eq: $participant_id}}\n    _inc: {imposter_vote_count: 1}\n  ) {\n    affected_rows\n  }\n  update_my_vote: update_participants(\n    where: {user_id: {_eq: $user_id}}\n    _set: {emergency_vote: true}\n  ) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useEmergencyMeetingVoteMutation__\n *\n * To run a mutation, you first call `useEmergencyMeetingVoteMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useEmergencyMeetingVoteMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useEmergencyMeetingVoteMutation({\n *   variables: {\n *     participant_id: // value for 'participant_id'\n *     user_id: // value for 'user_id'\n *   },\n * });\n */\nexport function useEmergencyMeetingVoteMutation(options: VueApolloComposable.UseMutationOptions<EmergencyMeetingVoteMutation, EmergencyMeetingVoteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<EmergencyMeetingVoteMutation, EmergencyMeetingVoteMutationVariables>>) {\n  return VueApolloComposable.useMutation<EmergencyMeetingVoteMutation, EmergencyMeetingVoteMutationVariables>(EmergencyMeetingVoteDocument, options);\n}\nexport type EmergencyMeetingVoteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<EmergencyMeetingVoteMutation, EmergencyMeetingVoteMutationVariables>;\nexport const UpdateParticipantsPicometerDocument = gql`\n    mutation UpdateParticipantsPicometer($participant_id: uuid!, $picometer_hint: String!) {\n  update_participants(\n    where: {id: {_eq: $participant_id}}\n    _set: {picometer_hint: $picometer_hint}\n  ) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useUpdateParticipantsPicometerMutation__\n *\n * To run a mutation, you first call `useUpdateParticipantsPicometerMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useUpdateParticipantsPicometerMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useUpdateParticipantsPicometerMutation({\n *   variables: {\n *     participant_id: // value for 'participant_id'\n *     picometer_hint: // value for 'picometer_hint'\n *   },\n * });\n */\nexport function useUpdateParticipantsPicometerMutation(options: VueApolloComposable.UseMutationOptions<UpdateParticipantsPicometerMutation, UpdateParticipantsPicometerMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UpdateParticipantsPicometerMutation, UpdateParticipantsPicometerMutationVariables>>) {\n  return VueApolloComposable.useMutation<UpdateParticipantsPicometerMutation, UpdateParticipantsPicometerMutationVariables>(UpdateParticipantsPicometerDocument, options);\n}\nexport type UpdateParticipantsPicometerMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UpdateParticipantsPicometerMutation, UpdateParticipantsPicometerMutationVariables>;\nexport const UpdateParticipantsViewfinderDocument = gql`\n    mutation UpdateParticipantsViewfinder($participant_id: uuid!, $viewfinder_hint: String!) {\n  update_participants(\n    where: {id: {_eq: $participant_id}}\n    _set: {viewfinder_hint: $viewfinder_hint}\n  ) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useUpdateParticipantsViewfinderMutation__\n *\n * To run a mutation, you first call `useUpdateParticipantsViewfinderMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useUpdateParticipantsViewfinderMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useUpdateParticipantsViewfinderMutation({\n *   variables: {\n *     participant_id: // value for 'participant_id'\n *     viewfinder_hint: // value for 'viewfinder_hint'\n *   },\n * });\n */\nexport function useUpdateParticipantsViewfinderMutation(options: VueApolloComposable.UseMutationOptions<UpdateParticipantsViewfinderMutation, UpdateParticipantsViewfinderMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UpdateParticipantsViewfinderMutation, UpdateParticipantsViewfinderMutationVariables>>) {\n  return VueApolloComposable.useMutation<UpdateParticipantsViewfinderMutation, UpdateParticipantsViewfinderMutationVariables>(UpdateParticipantsViewfinderDocument, options);\n}\nexport type UpdateParticipantsViewfinderMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UpdateParticipantsViewfinderMutation, UpdateParticipantsViewfinderMutationVariables>;\nexport const BuyPicometerDocument = gql`\n    mutation BuyPicometer($auth0_id: String!) {\n  update_participants(\n    where: {user_id: {_eq: $auth0_id}}\n    _inc: {score: -150}\n    _set: {picometer: true}\n  ) {\n    affected_rows\n    returning {\n      score\n      picometer\n      viewfinder\n    }\n  }\n}\n    `;\n\n/**\n * __useBuyPicometerMutation__\n *\n * To run a mutation, you first call `useBuyPicometerMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useBuyPicometerMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useBuyPicometerMutation({\n *   variables: {\n *     auth0_id: // value for 'auth0_id'\n *   },\n * });\n */\nexport function useBuyPicometerMutation(options: VueApolloComposable.UseMutationOptions<BuyPicometerMutation, BuyPicometerMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<BuyPicometerMutation, BuyPicometerMutationVariables>>) {\n  return VueApolloComposable.useMutation<BuyPicometerMutation, BuyPicometerMutationVariables>(BuyPicometerDocument, options);\n}\nexport type BuyPicometerMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<BuyPicometerMutation, BuyPicometerMutationVariables>;\nexport const BuyViewfinderDocument = gql`\n    mutation BuyViewfinder($auth0_id: String!) {\n  update_participants(\n    where: {user_id: {_eq: $auth0_id}}\n    _inc: {score: -150}\n    _set: {viewfinder: true}\n  ) {\n    affected_rows\n    returning {\n      score\n      picometer\n      viewfinder\n    }\n  }\n}\n    `;\n\n/**\n * __useBuyViewfinderMutation__\n *\n * To run a mutation, you first call `useBuyViewfinderMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useBuyViewfinderMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useBuyViewfinderMutation({\n *   variables: {\n *     auth0_id: // value for 'auth0_id'\n *   },\n * });\n */\nexport function useBuyViewfinderMutation(options: VueApolloComposable.UseMutationOptions<BuyViewfinderMutation, BuyViewfinderMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<BuyViewfinderMutation, BuyViewfinderMutationVariables>>) {\n  return VueApolloComposable.useMutation<BuyViewfinderMutation, BuyViewfinderMutationVariables>(BuyViewfinderDocument, options);\n}\nexport type BuyViewfinderMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<BuyViewfinderMutation, BuyViewfinderMutationVariables>;\nexport const KillParticipantsDocument = gql`\n    mutation KillParticipants($participant_id: uuid!, $team_id: uuid!) {\n  update_participants(where: {id: {_eq: $participant_id}}, _set: {status: DEAD}) {\n    affected_rows\n  }\n  update_teams(\n    where: {id: {_eq: $team_id}}\n    _set: {emergency_meeting: false}\n    _inc: {number: -1}\n  ) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useKillParticipantsMutation__\n *\n * To run a mutation, you first call `useKillParticipantsMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useKillParticipantsMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useKillParticipantsMutation({\n *   variables: {\n *     participant_id: // value for 'participant_id'\n *     team_id: // value for 'team_id'\n *   },\n * });\n */\nexport function useKillParticipantsMutation(options: VueApolloComposable.UseMutationOptions<KillParticipantsMutation, KillParticipantsMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<KillParticipantsMutation, KillParticipantsMutationVariables>>) {\n  return VueApolloComposable.useMutation<KillParticipantsMutation, KillParticipantsMutationVariables>(KillParticipantsDocument, options);\n}\nexport type KillParticipantsMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<KillParticipantsMutation, KillParticipantsMutationVariables>;\nexport const EmergencyMeetingControlDocument = gql`\n    mutation EmergencyMeetingControl($team_id: uuid!, $emergency_meeting: Boolean!) {\n  update_teams(\n    _set: {emergency_meeting: $emergency_meeting}\n    where: {id: {_eq: $team_id}}\n  ) {\n    affected_rows\n  }\n  update_participants(\n    where: {team_id: {_eq: $team_id}, status: {_neq: DEAD}}\n    _set: {emergency_vote: false, imposter_vote_count: 0}\n  ) {\n    affected_rows\n  }\n}\n    `;\n\n/**\n * __useEmergencyMeetingControlMutation__\n *\n * To run a mutation, you first call `useEmergencyMeetingControlMutation` within a Vue component and pass it any options that fit your needs.\n * When your component renders, `useEmergencyMeetingControlMutation` returns an object that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return\n *\n * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;\n *\n * @example\n * const { mutate, loading, error, onDone } = useEmergencyMeetingControlMutation({\n *   variables: {\n *     team_id: // value for 'team_id'\n *     emergency_meeting: // value for 'emergency_meeting'\n *   },\n * });\n */\nexport function useEmergencyMeetingControlMutation(options: VueApolloComposable.UseMutationOptions<EmergencyMeetingControlMutation, EmergencyMeetingControlMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<EmergencyMeetingControlMutation, EmergencyMeetingControlMutationVariables>>) {\n  return VueApolloComposable.useMutation<EmergencyMeetingControlMutation, EmergencyMeetingControlMutationVariables>(EmergencyMeetingControlDocument, options);\n}\nexport type EmergencyMeetingControlMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<EmergencyMeetingControlMutation, EmergencyMeetingControlMutationVariables>;\nexport const GetOneParticipantDetailsDocument = gql`\n    query getOneParticipantDetails($auth0_id: String!) {\n  participants(where: {user_id: {_eq: $auth0_id}}) {\n    description\n    name\n    role\n    team_id\n    user_id\n    score\n    contribution\n    status\n    viewfinder_hint\n    picometer_hint\n    team {\n      motto\n      name\n      picture_url\n      emergency_meeting\n      scores {\n        score\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetOneParticipantDetailsQuery__\n *\n * To run a query within a Vue component, call `useGetOneParticipantDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOneParticipantDetailsQuery` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param variables that will be passed into the query\n * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;\n *\n * @example\n * const { result, loading, error } = useGetOneParticipantDetailsQuery({\n *   auth0_id: // value for 'auth0_id'\n * });\n */\nexport function useGetOneParticipantDetailsQuery(variables: GetOneParticipantDetailsQueryVariables | VueCompositionApi.Ref<GetOneParticipantDetailsQueryVariables> | ReactiveFunction<GetOneParticipantDetailsQueryVariables>, options: VueApolloComposable.UseQueryOptions<GetOneParticipantDetailsQuery, GetOneParticipantDetailsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetOneParticipantDetailsQuery, GetOneParticipantDetailsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetOneParticipantDetailsQuery, GetOneParticipantDetailsQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<GetOneParticipantDetailsQuery, GetOneParticipantDetailsQueryVariables>(GetOneParticipantDetailsDocument, variables, options);\n}\nexport type GetOneParticipantDetailsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GetOneParticipantDetailsQuery, GetOneParticipantDetailsQueryVariables>;\nexport const GetContestSubmissionDocument = gql`\n    query GetContestSubmission($limit: Int!, $offset: Int!) {\n  contest(offset: $offset, limit: $limit, order_by: {submission_time: asc}) {\n    submission_url\n    participant_id\n  }\n}\n    `;\n\n/**\n * __useGetContestSubmissionQuery__\n *\n * To run a query within a Vue component, call `useGetContestSubmissionQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetContestSubmissionQuery` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param variables that will be passed into the query\n * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;\n *\n * @example\n * const { result, loading, error } = useGetContestSubmissionQuery({\n *   limit: // value for 'limit'\n *   offset: // value for 'offset'\n * });\n */\nexport function useGetContestSubmissionQuery(variables: GetContestSubmissionQueryVariables | VueCompositionApi.Ref<GetContestSubmissionQueryVariables> | ReactiveFunction<GetContestSubmissionQueryVariables>, options: VueApolloComposable.UseQueryOptions<GetContestSubmissionQuery, GetContestSubmissionQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetContestSubmissionQuery, GetContestSubmissionQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetContestSubmissionQuery, GetContestSubmissionQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<GetContestSubmissionQuery, GetContestSubmissionQueryVariables>(GetContestSubmissionDocument, variables, options);\n}\nexport type GetContestSubmissionQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GetContestSubmissionQuery, GetContestSubmissionQueryVariables>;\nexport const GetParticipantVotingDetailsDocument = gql`\n    query getParticipantVotingDetails($auth0_id: String!) {\n  participants(where: {user_id: {_eq: $auth0_id}}) {\n    id\n    submission\n    vote\n  }\n}\n    `;\n\n/**\n * __useGetParticipantVotingDetailsQuery__\n *\n * To run a query within a Vue component, call `useGetParticipantVotingDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetParticipantVotingDetailsQuery` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param variables that will be passed into the query\n * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;\n *\n * @example\n * const { result, loading, error } = useGetParticipantVotingDetailsQuery({\n *   auth0_id: // value for 'auth0_id'\n * });\n */\nexport function useGetParticipantVotingDetailsQuery(variables: GetParticipantVotingDetailsQueryVariables | VueCompositionApi.Ref<GetParticipantVotingDetailsQueryVariables> | ReactiveFunction<GetParticipantVotingDetailsQueryVariables>, options: VueApolloComposable.UseQueryOptions<GetParticipantVotingDetailsQuery, GetParticipantVotingDetailsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetParticipantVotingDetailsQuery, GetParticipantVotingDetailsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetParticipantVotingDetailsQuery, GetParticipantVotingDetailsQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<GetParticipantVotingDetailsQuery, GetParticipantVotingDetailsQueryVariables>(GetParticipantVotingDetailsDocument, variables, options);\n}\nexport type GetParticipantVotingDetailsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GetParticipantVotingDetailsQuery, GetParticipantVotingDetailsQueryVariables>;\nexport const GetControlStateDocument = gql`\n    query GetControlState {\n  control {\n    vote\n    submission\n    leaderboard\n  }\n}\n    `;\n\n/**\n * __useGetControlStateQuery__\n *\n * To run a query within a Vue component, call `useGetControlStateQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetControlStateQuery` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;\n *\n * @example\n * const { result, loading, error } = useGetControlStateQuery();\n */\nexport function useGetControlStateQuery(options: VueApolloComposable.UseQueryOptions<GetControlStateQuery, GetControlStateQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetControlStateQuery, GetControlStateQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetControlStateQuery, GetControlStateQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<GetControlStateQuery, GetControlStateQueryVariables>(GetControlStateDocument, {}, options);\n}\nexport type GetControlStateQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GetControlStateQuery, GetControlStateQueryVariables>;\nexport const GetArtifactsDetailsDocument = gql`\n    query GetArtifactsDetails($auth0_id: String!) {\n  participants(where: {user_id: {_eq: $auth0_id}}) {\n    viewfinder\n    picometer\n    score\n  }\n}\n    `;\n\n/**\n * __useGetArtifactsDetailsQuery__\n *\n * To run a query within a Vue component, call `useGetArtifactsDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetArtifactsDetailsQuery` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param variables that will be passed into the query\n * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;\n *\n * @example\n * const { result, loading, error } = useGetArtifactsDetailsQuery({\n *   auth0_id: // value for 'auth0_id'\n * });\n */\nexport function useGetArtifactsDetailsQuery(variables: GetArtifactsDetailsQueryVariables | VueCompositionApi.Ref<GetArtifactsDetailsQueryVariables> | ReactiveFunction<GetArtifactsDetailsQueryVariables>, options: VueApolloComposable.UseQueryOptions<GetArtifactsDetailsQuery, GetArtifactsDetailsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<GetArtifactsDetailsQuery, GetArtifactsDetailsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<GetArtifactsDetailsQuery, GetArtifactsDetailsQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<GetArtifactsDetailsQuery, GetArtifactsDetailsQueryVariables>(GetArtifactsDetailsDocument, variables, options);\n}\nexport type GetArtifactsDetailsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<GetArtifactsDetailsQuery, GetArtifactsDetailsQueryVariables>;\nexport const SubscribePublicLeaderboardDocument = gql`\n    subscription SubscribePublicLeaderboard {\n  leaderboard_public {\n    score\n    name\n    picture_url\n  }\n}\n    `;\n\n/**\n * __useSubscribePublicLeaderboardSubscription__\n *\n * To run a query within a Vue component, call `useSubscribePublicLeaderboardSubscription` and pass it any options that fit your needs.\n * When your component renders, `useSubscribePublicLeaderboardSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useSubscribePublicLeaderboardSubscription();\n */\nexport function useSubscribePublicLeaderboardSubscription(options: VueApolloComposable.UseSubscriptionOptions<SubscribePublicLeaderboardSubscription, SubscribePublicLeaderboardSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<SubscribePublicLeaderboardSubscription, SubscribePublicLeaderboardSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<SubscribePublicLeaderboardSubscription, SubscribePublicLeaderboardSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<SubscribePublicLeaderboardSubscription, SubscribePublicLeaderboardSubscriptionVariables>(SubscribePublicLeaderboardDocument, {}, options);\n}\nexport type SubscribePublicLeaderboardSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<SubscribePublicLeaderboardSubscription, SubscribePublicLeaderboardSubscriptionVariables>;\nexport const SubscibeToAllGamesDocument = gql`\n    subscription SubscibeToAllGames {\n  games {\n    game_name\n    id\n    teams_scores {\n      score\n      team_id\n      team {\n        name\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useSubscibeToAllGamesSubscription__\n *\n * To run a query within a Vue component, call `useSubscibeToAllGamesSubscription` and pass it any options that fit your needs.\n * When your component renders, `useSubscibeToAllGamesSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useSubscibeToAllGamesSubscription();\n */\nexport function useSubscibeToAllGamesSubscription(options: VueApolloComposable.UseSubscriptionOptions<SubscibeToAllGamesSubscription, SubscibeToAllGamesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<SubscibeToAllGamesSubscription, SubscibeToAllGamesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<SubscibeToAllGamesSubscription, SubscibeToAllGamesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<SubscibeToAllGamesSubscription, SubscibeToAllGamesSubscriptionVariables>(SubscibeToAllGamesDocument, {}, options);\n}\nexport type SubscibeToAllGamesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<SubscibeToAllGamesSubscription, SubscibeToAllGamesSubscriptionVariables>;\nexport const GetParticipantsScoreDocument = gql`\n    subscription GetParticipantsScore {\n  teams {\n    name\n    id\n    participants {\n      name\n      score\n      id\n    }\n  }\n}\n    `;\n\n/**\n * __useGetParticipantsScoreSubscription__\n *\n * To run a query within a Vue component, call `useGetParticipantsScoreSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetParticipantsScoreSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useGetParticipantsScoreSubscription();\n */\nexport function useGetParticipantsScoreSubscription(options: VueApolloComposable.UseSubscriptionOptions<GetParticipantsScoreSubscription, GetParticipantsScoreSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<GetParticipantsScoreSubscription, GetParticipantsScoreSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<GetParticipantsScoreSubscription, GetParticipantsScoreSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<GetParticipantsScoreSubscription, GetParticipantsScoreSubscriptionVariables>(GetParticipantsScoreDocument, {}, options);\n}\nexport type GetParticipantsScoreSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<GetParticipantsScoreSubscription, GetParticipantsScoreSubscriptionVariables>;\nexport const EmergencyMeetingDetailsDocument = gql`\n    subscription EmergencyMeetingDetails {\n  participants(order_by: {name: asc}) {\n    emergency_vote\n    imposter_vote_count\n    name\n    status\n    user_id\n    emergency_vote\n    team {\n      number\n      picture_url\n    }\n  }\n}\n    `;\n\n/**\n * __useEmergencyMeetingDetailsSubscription__\n *\n * To run a query within a Vue component, call `useEmergencyMeetingDetailsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useEmergencyMeetingDetailsSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useEmergencyMeetingDetailsSubscription();\n */\nexport function useEmergencyMeetingDetailsSubscription(options: VueApolloComposable.UseSubscriptionOptions<EmergencyMeetingDetailsSubscription, EmergencyMeetingDetailsSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<EmergencyMeetingDetailsSubscription, EmergencyMeetingDetailsSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<EmergencyMeetingDetailsSubscription, EmergencyMeetingDetailsSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<EmergencyMeetingDetailsSubscription, EmergencyMeetingDetailsSubscriptionVariables>(EmergencyMeetingDetailsDocument, {}, options);\n}\nexport type EmergencyMeetingDetailsSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<EmergencyMeetingDetailsSubscription, EmergencyMeetingDetailsSubscriptionVariables>;\nexport const GetEmergencyVotingStatusDocument = gql`\n    subscription GetEmergencyVotingStatus($auth0_id: String!) {\n  participants(where: {user_id: {_eq: $auth0_id}}) {\n    emergency_vote\n  }\n}\n    `;\n\n/**\n * __useGetEmergencyVotingStatusSubscription__\n *\n * To run a query within a Vue component, call `useGetEmergencyVotingStatusSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetEmergencyVotingStatusSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param variables that will be passed into the subscription\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useGetEmergencyVotingStatusSubscription({\n *   auth0_id: // value for 'auth0_id'\n * });\n */\nexport function useGetEmergencyVotingStatusSubscription(variables: GetEmergencyVotingStatusSubscriptionVariables | VueCompositionApi.Ref<GetEmergencyVotingStatusSubscriptionVariables> | ReactiveFunction<GetEmergencyVotingStatusSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<GetEmergencyVotingStatusSubscription, GetEmergencyVotingStatusSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<GetEmergencyVotingStatusSubscription, GetEmergencyVotingStatusSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<GetEmergencyVotingStatusSubscription, GetEmergencyVotingStatusSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<GetEmergencyVotingStatusSubscription, GetEmergencyVotingStatusSubscriptionVariables>(GetEmergencyVotingStatusDocument, variables, options);\n}\nexport type GetEmergencyVotingStatusSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<GetEmergencyVotingStatusSubscription, GetEmergencyVotingStatusSubscriptionVariables>;\nexport const GetParticipantsPicometerDetailsDocument = gql`\n    subscription GetParticipantsPicometerDetails {\n  teams {\n    name\n    participants(where: {picometer: {_eq: true}, picometer_hint: {_eq: \"None\"}}) {\n      id\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useGetParticipantsPicometerDetailsSubscription__\n *\n * To run a query within a Vue component, call `useGetParticipantsPicometerDetailsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetParticipantsPicometerDetailsSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useGetParticipantsPicometerDetailsSubscription();\n */\nexport function useGetParticipantsPicometerDetailsSubscription(options: VueApolloComposable.UseSubscriptionOptions<GetParticipantsPicometerDetailsSubscription, GetParticipantsPicometerDetailsSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<GetParticipantsPicometerDetailsSubscription, GetParticipantsPicometerDetailsSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<GetParticipantsPicometerDetailsSubscription, GetParticipantsPicometerDetailsSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<GetParticipantsPicometerDetailsSubscription, GetParticipantsPicometerDetailsSubscriptionVariables>(GetParticipantsPicometerDetailsDocument, {}, options);\n}\nexport type GetParticipantsPicometerDetailsSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<GetParticipantsPicometerDetailsSubscription, GetParticipantsPicometerDetailsSubscriptionVariables>;\nexport const GetParticipantsViewfinderDetailsDocument = gql`\n    subscription GetParticipantsViewfinderDetails {\n  teams {\n    name\n    participants(where: {viewfinder: {_eq: true}, viewfinder_hint: {_eq: \"None\"}}) {\n      id\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useGetParticipantsViewfinderDetailsSubscription__\n *\n * To run a query within a Vue component, call `useGetParticipantsViewfinderDetailsSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetParticipantsViewfinderDetailsSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useGetParticipantsViewfinderDetailsSubscription();\n */\nexport function useGetParticipantsViewfinderDetailsSubscription(options: VueApolloComposable.UseSubscriptionOptions<GetParticipantsViewfinderDetailsSubscription, GetParticipantsViewfinderDetailsSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<GetParticipantsViewfinderDetailsSubscription, GetParticipantsViewfinderDetailsSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<GetParticipantsViewfinderDetailsSubscription, GetParticipantsViewfinderDetailsSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<GetParticipantsViewfinderDetailsSubscription, GetParticipantsViewfinderDetailsSubscriptionVariables>(GetParticipantsViewfinderDetailsDocument, {}, options);\n}\nexport type GetParticipantsViewfinderDetailsSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<GetParticipantsViewfinderDetailsSubscription, GetParticipantsViewfinderDetailsSubscriptionVariables>;\nexport const GetEmergencyMeetingStatusDocument = gql`\n    subscription GetEmergencyMeetingStatus {\n  teams {\n    id\n    name\n    emergency_meeting\n    number\n    participants(where: {status: {_eq: ALIVE}}) {\n      id\n      name\n      imposter_vote_count\n    }\n  }\n}\n    `;\n\n/**\n * __useGetEmergencyMeetingStatusSubscription__\n *\n * To run a query within a Vue component, call `useGetEmergencyMeetingStatusSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetEmergencyMeetingStatusSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useGetEmergencyMeetingStatusSubscription();\n */\nexport function useGetEmergencyMeetingStatusSubscription(options: VueApolloComposable.UseSubscriptionOptions<GetEmergencyMeetingStatusSubscription, GetEmergencyMeetingStatusSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<GetEmergencyMeetingStatusSubscription, GetEmergencyMeetingStatusSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<GetEmergencyMeetingStatusSubscription, GetEmergencyMeetingStatusSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<GetEmergencyMeetingStatusSubscription, GetEmergencyMeetingStatusSubscriptionVariables>(GetEmergencyMeetingStatusDocument, {}, options);\n}\nexport type GetEmergencyMeetingStatusSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<GetEmergencyMeetingStatusSubscription, GetEmergencyMeetingStatusSubscriptionVariables>;\nexport const ContestSubmissionLiveResultDocument = gql`\n    subscription ContestSubmissionLiveResult {\n  participants(\n    order_by: {contest_submission: {vote_count: desc_nulls_last}}\n    limit: 5\n  ) {\n    name\n    team {\n      picture_url\n    }\n    contest_submission {\n      vote_count\n      submission_url\n    }\n  }\n}\n    `;\n\n/**\n * __useContestSubmissionLiveResultSubscription__\n *\n * To run a query within a Vue component, call `useContestSubmissionLiveResultSubscription` and pass it any options that fit your needs.\n * When your component renders, `useContestSubmissionLiveResultSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useContestSubmissionLiveResultSubscription();\n */\nexport function useContestSubmissionLiveResultSubscription(options: VueApolloComposable.UseSubscriptionOptions<ContestSubmissionLiveResultSubscription, ContestSubmissionLiveResultSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<ContestSubmissionLiveResultSubscription, ContestSubmissionLiveResultSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<ContestSubmissionLiveResultSubscription, ContestSubmissionLiveResultSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<ContestSubmissionLiveResultSubscription, ContestSubmissionLiveResultSubscriptionVariables>(ContestSubmissionLiveResultDocument, {}, options);\n}\nexport type ContestSubmissionLiveResultSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<ContestSubmissionLiveResultSubscription, ContestSubmissionLiveResultSubscriptionVariables>;\nexport const GetEmergencyMeetingResultDocument = gql`\n    subscription GetEmergencyMeetingResult {\n  participants(where: {status: {_eq: DEAD}}) {\n    name\n    role\n  }\n}\n    `;\n\n/**\n * __useGetEmergencyMeetingResultSubscription__\n *\n * To run a query within a Vue component, call `useGetEmergencyMeetingResultSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetEmergencyMeetingResultSubscription` returns an object from Apollo Client that contains result, loading and error properties\n * you can use to render your UI.\n *\n * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;\n *\n * @example\n * const { result, loading, error } = useGetEmergencyMeetingResultSubscription();\n */\nexport function useGetEmergencyMeetingResultSubscription(options: VueApolloComposable.UseSubscriptionOptions<GetEmergencyMeetingResultSubscription, GetEmergencyMeetingResultSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<GetEmergencyMeetingResultSubscription, GetEmergencyMeetingResultSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<GetEmergencyMeetingResultSubscription, GetEmergencyMeetingResultSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<GetEmergencyMeetingResultSubscription, GetEmergencyMeetingResultSubscriptionVariables>(GetEmergencyMeetingResultDocument, {}, options);\n}\nexport type GetEmergencyMeetingResultSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<GetEmergencyMeetingResultSubscription, GetEmergencyMeetingResultSubscriptionVariables>;\n","import Vue from 'vue'\n\n/**\n * Delayable\n *\n * @mixin\n *\n * Changes the open or close delay time for elements\n */\nexport default Vue.extend<Vue & { isActive?: boolean }>().extend({\n  name: 'delayable',\n\n  props: {\n    openDelay: {\n      type: [Number, String],\n      default: 0,\n    },\n    closeDelay: {\n      type: [Number, String],\n      default: 0,\n    },\n  },\n\n  data: () => ({\n    openTimeout: undefined as number | undefined,\n    closeTimeout: undefined as number | undefined,\n  }),\n\n  methods: {\n    /**\n     * Clear any pending delay timers from executing\n     */\n    clearDelay (): void {\n      clearTimeout(this.openTimeout)\n      clearTimeout(this.closeTimeout)\n    },\n    /**\n     * Runs callback after a specified delay\n     */\n    runDelay (type: 'open' | 'close', cb?: () => void): void {\n      this.clearDelay()\n\n      const delay = parseInt((this as any)[`${type}Delay`], 10)\n\n      ;(this as any)[`${type}Timeout`] = setTimeout(cb || (() => {\n        this.isActive = { open: true, close: false }[type]\n      }), delay)\n    },\n  },\n})\n","import Vue from 'vue'\n\nimport { getZIndex } from '../../util/helpers'\n\ninterface options extends Vue {\n  $refs: {\n    content: Element\n  }\n}\n\n/* @vue/component */\nexport default Vue.extend<options>().extend({\n  name: 'stackable',\n\n  data () {\n    return {\n      stackElement: null as Element | null,\n      stackExclude: null as Element[] | null,\n      stackMinZIndex: 0,\n      isActive: false,\n    }\n  },\n  computed: {\n    activeZIndex (): number {\n      if (typeof window === 'undefined') return 0\n\n      const content = this.stackElement || this.$refs.content\n      // Return current zindex if not active\n\n      const index = !this.isActive\n        ? getZIndex(content)\n        : this.getMaxZIndex(this.stackExclude || [content]) + 2\n\n      if (index == null) return index\n\n      // Return max current z-index (excluding self) + 2\n      // (2 to leave room for an overlay below, if needed)\n      return parseInt(index)\n    },\n  },\n  methods: {\n    getMaxZIndex (exclude: Element[] = []) {\n      const base = this.$el\n      // Start with lowest allowed z-index or z-index of\n      // base component's element, whichever is greater\n      const zis = [this.stackMinZIndex, getZIndex(base)]\n      // Convert the NodeList to an array to\n      // prevent an Edge bug with Symbol.iterator\n      // https://github.com/vuetifyjs/vuetify/issues/2146\n      const activeElements = [\n        ...document.getElementsByClassName('v-menu__content--active'),\n        ...document.getElementsByClassName('v-dialog__content--active'),\n      ]\n\n      // Get z-index for all active dialogs\n      for (let index = 0; index < activeElements.length; index++) {\n        if (!exclude.includes(activeElements[index])) {\n          zis.push(getZIndex(activeElements[index]))\n        }\n      }\n\n      return Math.max(...zis)\n    },\n  },\n})\n","import Vue, { VNode } from 'vue'\nimport VProgressLinear from '../../components/VProgressLinear'\n\ninterface colorable extends Vue {\n  color?: string\n}\n\n/**\n * Loadable\n *\n * @mixin\n *\n * Used to add linear progress bar to components\n * Can use a default bar with a specific color\n * or designate a custom progress linear bar\n */\n/* @vue/component */\nexport default Vue.extend<colorable>().extend({\n  name: 'loadable',\n\n  props: {\n    loading: {\n      type: [Boolean, String],\n      default: false,\n    },\n    loaderHeight: {\n      type: [Number, String],\n      default: 2,\n    },\n  },\n\n  methods: {\n    genProgress (): VNode | VNode[] | null {\n      if (this.loading === false) return null\n\n      return this.$slots.progress || this.$createElement(VProgressLinear, {\n        props: {\n          absolute: true,\n          color: (this.loading === true || this.loading === '')\n            ? (this.color || 'primary')\n            : this.loading,\n          height: this.loaderHeight,\n          indeterminate: true,\n        },\n      })\n    },\n  },\n})\n","var $ = require('../internals/export');\nvar is = require('../internals/same-value');\n\n// `Object.is` method\n// https://tc39.github.io/ecma262/#sec-object.is\n$({ target: 'Object', stat: true }, {\n  is: is\n});\n","// Mixins\nimport Colorable from '../colorable'\nimport Themeable from '../themeable'\nimport { inject as RegistrableInject } from '../registrable'\n\n// Utilities\nimport { deepEqual } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\nimport { InputMessage, InputValidationRules } from 'vuetify/types'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'form', any>('form'),\n  Themeable,\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'validatable',\n\n  props: {\n    disabled: Boolean,\n    error: Boolean,\n    errorCount: {\n      type: [Number, String],\n      default: 1,\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    messages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    readonly: Boolean,\n    rules: {\n      type: Array,\n      default: () => [],\n    } as PropValidator<InputValidationRules>,\n    success: Boolean,\n    successMessages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    validateOnBlur: Boolean,\n    value: { required: false },\n  },\n\n  data () {\n    return {\n      errorBucket: [] as string[],\n      hasColor: false,\n      hasFocused: false,\n      hasInput: false,\n      isFocused: false,\n      isResetting: false,\n      lazyValue: this.value,\n      valid: false,\n    }\n  },\n\n  computed: {\n    computedColor (): string | undefined {\n      if (this.isDisabled) return undefined\n      if (this.color) return this.color\n      // It's assumed that if the input is on a\n      // dark background, the user will want to\n      // have a white color. If the entire app\n      // is setup to be dark, then they will\n      // like want to use their primary color\n      if (this.isDark && !this.appIsDark) return 'white'\n      else return 'primary'\n    },\n    hasError (): boolean {\n      return (\n        this.internalErrorMessages.length > 0 ||\n        this.errorBucket.length > 0 ||\n        this.error\n      )\n    },\n    // TODO: Add logic that allows the user to enable based\n    // upon a good validation\n    hasSuccess (): boolean {\n      return (\n        this.internalSuccessMessages.length > 0 ||\n        this.success\n      )\n    },\n    externalError (): boolean {\n      return this.internalErrorMessages.length > 0 || this.error\n    },\n    hasMessages (): boolean {\n      return this.validationTarget.length > 0\n    },\n    hasState (): boolean {\n      if (this.isDisabled) return false\n\n      return (\n        this.hasSuccess ||\n        (this.shouldValidate && this.hasError)\n      )\n    },\n    internalErrorMessages (): InputValidationRules {\n      return this.genInternalMessages(this.errorMessages)\n    },\n    internalMessages (): InputValidationRules {\n      return this.genInternalMessages(this.messages)\n    },\n    internalSuccessMessages (): InputValidationRules {\n      return this.genInternalMessages(this.successMessages)\n    },\n    internalValue: {\n      get (): unknown {\n        return this.lazyValue\n      },\n      set (val: any) {\n        this.lazyValue = val\n\n        this.$emit('input', val)\n      },\n    },\n    isDisabled (): boolean {\n      return this.disabled || (\n        !!this.form &&\n        this.form.disabled\n      )\n    },\n    isInteractive (): boolean {\n      return !this.isDisabled && !this.isReadonly\n    },\n    isReadonly (): boolean {\n      return this.readonly || (\n        !!this.form &&\n        this.form.readonly\n      )\n    },\n    shouldValidate (): boolean {\n      if (this.externalError) return true\n      if (this.isResetting) return false\n\n      return this.validateOnBlur\n        ? this.hasFocused && !this.isFocused\n        : (this.hasInput || this.hasFocused)\n    },\n    validations (): InputValidationRules {\n      return this.validationTarget.slice(0, Number(this.errorCount))\n    },\n    validationState (): string | undefined {\n      if (this.isDisabled) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor) return this.computedColor\n      return undefined\n    },\n    validationTarget (): InputValidationRules {\n      if (this.internalErrorMessages.length > 0) {\n        return this.internalErrorMessages\n      } else if (this.successMessages && this.successMessages.length > 0) {\n        return this.internalSuccessMessages\n      } else if (this.messages && this.messages.length > 0) {\n        return this.internalMessages\n      } else if (this.shouldValidate) {\n        return this.errorBucket\n      } else return []\n    },\n  },\n\n  watch: {\n    rules: {\n      handler (newVal, oldVal) {\n        if (deepEqual(newVal, oldVal)) return\n        this.validate()\n      },\n      deep: true,\n    },\n    internalValue () {\n      // If it's the first time we're setting input,\n      // mark it with hasInput\n      this.hasInput = true\n      this.validateOnBlur || this.$nextTick(this.validate)\n    },\n    isFocused (val) {\n      // Should not check validation\n      // if disabled\n      if (\n        !val &&\n        !this.isDisabled\n      ) {\n        this.hasFocused = true\n        this.validateOnBlur && this.$nextTick(this.validate)\n      }\n    },\n    isResetting () {\n      setTimeout(() => {\n        this.hasInput = false\n        this.hasFocused = false\n        this.isResetting = false\n        this.validate()\n      }, 0)\n    },\n    hasError (val) {\n      if (this.shouldValidate) {\n        this.$emit('update:error', val)\n      }\n    },\n    value (val) {\n      this.lazyValue = val\n    },\n  },\n\n  beforeMount () {\n    this.validate()\n  },\n\n  created () {\n    this.form && this.form.register(this)\n  },\n\n  beforeDestroy () {\n    this.form && this.form.unregister(this)\n  },\n\n  methods: {\n    genInternalMessages (messages: InputMessage | null): InputValidationRules {\n      if (!messages) return []\n      else if (Array.isArray(messages)) return messages\n      else return [messages]\n    },\n    /** @public */\n    reset () {\n      this.isResetting = true\n      this.internalValue = Array.isArray(this.internalValue)\n        ? []\n        : undefined\n    },\n    /** @public */\n    resetValidation () {\n      this.isResetting = true\n    },\n    /** @public */\n    validate (force = false, value?: any): boolean {\n      const errorBucket = []\n      value = value || this.internalValue\n\n      if (force) this.hasInput = this.hasFocused = true\n\n      for (let index = 0; index < this.rules.length; index++) {\n        const rule = this.rules[index]\n        const valid = typeof rule === 'function' ? rule(value) : rule\n\n        if (valid === false || typeof valid === 'string') {\n          errorBucket.push(valid || '')\n        } else if (typeof valid !== 'boolean') {\n          consoleError(`Rules should return a string or boolean, received '${typeof valid}' instead`, this)\n        }\n      }\n\n      this.errorBucket = errorBucket\n      this.valid = errorBucket.length === 0\n\n      return this.valid\n    },\n  },\n})\n","// Mixins\nimport Themeable from '../../mixins/themeable'\n\n// Types\nimport { VNode } from 'vue'\n\n/* @vue/component */\nexport default Themeable.extend({\n  name: 'v-theme-provider',\n\n  props: { root: Boolean },\n\n  computed: {\n    isDark (): boolean {\n      return this.root\n        ? this.rootIsDark\n        : Themeable.options.computed.isDark.call(this)\n    },\n  },\n\n  render (): VNode {\n    /* istanbul ignore next */\n    return (\n      this.$slots.default! &&\n      this.$slots.default!.find(node => !node.isComment && node.text !== ' ')!\n    )\n  },\n})\n","// Mixins\nimport Delayable from '../delayable'\nimport Toggleable from '../toggleable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { getSlot, getSlotType } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\n\n// Types\nimport { VNode, PropType } from 'vue'\n\ntype Listeners = Dictionary<(e: MouseEvent & KeyboardEvent & FocusEvent) => void>\n\nconst baseMixins = mixins(\n  Delayable,\n  Toggleable\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'activatable',\n\n  props: {\n    activator: {\n      default: null as unknown as PropType<string | HTMLElement | VNode | Element | null>,\n      validator: (val: string | object) => {\n        return ['string', 'object'].includes(typeof val)\n      },\n    },\n    disabled: Boolean,\n    internalActivator: Boolean,\n    openOnHover: Boolean,\n    openOnFocus: Boolean,\n  },\n\n  data: () => ({\n    // Do not use this directly, call getActivator() instead\n    activatorElement: null as HTMLElement | null,\n    activatorNode: [] as VNode[],\n    events: ['click', 'mouseenter', 'mouseleave', 'focus'],\n    listeners: {} as Listeners,\n  }),\n\n  watch: {\n    activator: 'resetActivator',\n    openOnFocus: 'resetActivator',\n    openOnHover: 'resetActivator',\n  },\n\n  mounted () {\n    const slotType = getSlotType(this, 'activator', true)\n\n    if (slotType && ['v-slot', 'normal'].includes(slotType)) {\n      consoleError(`The activator slot must be bound, try '<template v-slot:activator=\"{ on }\"><v-btn v-on=\"on\">'`, this)\n    }\n\n    this.addActivatorEvents()\n  },\n\n  beforeDestroy () {\n    this.removeActivatorEvents()\n  },\n\n  methods: {\n    addActivatorEvents () {\n      if (\n        !this.activator ||\n        this.disabled ||\n        !this.getActivator()\n      ) return\n\n      this.listeners = this.genActivatorListeners()\n      const keys = Object.keys(this.listeners)\n\n      for (const key of keys) {\n        this.getActivator()!.addEventListener(key, this.listeners[key] as any)\n      }\n    },\n    genActivator () {\n      const node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {\n        on: this.genActivatorListeners(),\n        attrs: this.genActivatorAttributes(),\n      })) || []\n\n      this.activatorNode = node\n\n      return node\n    },\n    genActivatorAttributes () {\n      return {\n        role: 'button',\n        'aria-haspopup': true,\n        'aria-expanded': String(this.isActive),\n      }\n    },\n    genActivatorListeners () {\n      if (this.disabled) return {}\n\n      const listeners: Listeners = {}\n\n      if (this.openOnHover) {\n        listeners.mouseenter = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('open')\n        }\n        listeners.mouseleave = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('close')\n        }\n      } else {\n        listeners.click = (e: MouseEvent) => {\n          const activator = this.getActivator(e)\n          if (activator) activator.focus()\n\n          e.stopPropagation()\n\n          this.isActive = !this.isActive\n        }\n      }\n\n      if (this.openOnFocus) {\n        listeners.focus = (e: FocusEvent) => {\n          this.getActivator(e)\n\n          e.stopPropagation()\n\n          this.isActive = !this.isActive\n        }\n      }\n\n      return listeners\n    },\n    getActivator (e?: Event): HTMLElement | null {\n      // If we've already fetched the activator, re-use\n      if (this.activatorElement) return this.activatorElement\n\n      let activator = null\n\n      if (this.activator) {\n        const target = this.internalActivator ? this.$el : document\n\n        if (typeof this.activator === 'string') {\n          // Selector\n          activator = target.querySelector(this.activator)\n        } else if ((this.activator as any).$el) {\n          // Component (ref)\n          activator = (this.activator as any).$el\n        } else {\n          // HTMLElement | Element\n          activator = this.activator\n        }\n      } else if (this.activatorNode.length === 1 || (this.activatorNode.length && !e)) {\n        // Use the contents of the activator slot\n        // There's either only one element in it or we\n        // don't have a click event to use as a last resort\n        const vm = this.activatorNode[0].componentInstance\n        if (\n          vm &&\n          vm.$options.mixins && //                         Activatable is indirectly used via Menuable\n          vm.$options.mixins.some((m: any) => m.options && ['activatable', 'menuable'].includes(m.options.name))\n        ) {\n          // Activator is actually another activatible component, use its activator (#8846)\n          activator = (vm as any).getActivator()\n        } else {\n          activator = this.activatorNode[0].elm as HTMLElement\n        }\n      } else if (e) {\n        // Activated by a click or focus event\n        activator = (e.currentTarget || e.target) as HTMLElement\n      }\n\n      this.activatorElement = activator\n\n      return this.activatorElement\n    },\n    getContentSlot () {\n      return getSlot(this, 'default', this.getValueProxy(), true)\n    },\n    getValueProxy (): object {\n      const self = this\n      return {\n        get value () {\n          return self.isActive\n        },\n        set value (isActive: boolean) {\n          self.isActive = isActive\n        },\n      }\n    },\n    removeActivatorEvents () {\n      if (\n        !this.activator ||\n        !this.activatorElement\n      ) return\n\n      const keys = Object.keys(this.listeners)\n\n      for (const key of keys) {\n        (this.activatorElement as any).removeEventListener(key, this.listeners[key])\n      }\n\n      this.listeners = {}\n    },\n    resetActivator () {\n      this.removeActivatorEvents()\n      this.activatorElement = null\n      this.getActivator()\n      this.addActivatorEvents()\n    },\n  },\n})\n","// Mixins\nimport Bootable from '../bootable'\n\n// Utilities\nimport { getObjectValueByPath } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport Vue, { PropOptions } from 'vue'\nimport { VNode } from 'vue/types'\n\ninterface options extends Vue {\n  $el: HTMLElement\n  $refs: {\n    content: HTMLElement\n  }\n}\n\nfunction validateAttachTarget (val: any) {\n  const type = typeof val\n\n  if (type === 'boolean' || type === 'string') return true\n\n  return val.nodeType === Node.ELEMENT_NODE\n}\n\n/* @vue/component */\nexport default mixins<options &\n  /* eslint-disable indent */\n  ExtractVue<typeof Bootable>\n  /* eslint-enable indent */\n>(Bootable).extend({\n  name: 'detachable',\n\n  props: {\n    attach: {\n      default: false,\n      validator: validateAttachTarget,\n    } as PropOptions<boolean | string | Element>,\n    contentClass: {\n      type: String,\n      default: '',\n    },\n  },\n\n  data: () => ({\n    activatorNode: null as null | VNode | VNode[],\n    hasDetached: false,\n  }),\n\n  watch: {\n    attach () {\n      this.hasDetached = false\n      this.initDetach()\n    },\n    hasContent () {\n      this.$nextTick(this.initDetach)\n    },\n  },\n\n  beforeMount () {\n    this.$nextTick(() => {\n      if (this.activatorNode) {\n        const activator = Array.isArray(this.activatorNode) ? this.activatorNode : [this.activatorNode]\n\n        activator.forEach(node => {\n          if (!node.elm) return\n          if (!this.$el.parentNode) return\n\n          const target = this.$el === this.$el.parentNode.firstChild\n            ? this.$el\n            : this.$el.nextSibling\n\n          this.$el.parentNode.insertBefore(node.elm, target)\n        })\n      }\n    })\n  },\n\n  mounted () {\n    this.hasContent && this.initDetach()\n  },\n\n  deactivated () {\n    this.isActive = false\n  },\n\n  beforeDestroy () {\n    // IE11 Fix\n    try {\n      if (\n        this.$refs.content &&\n        this.$refs.content.parentNode\n      ) {\n        this.$refs.content.parentNode.removeChild(this.$refs.content)\n      }\n\n      if (this.activatorNode) {\n        const activator = Array.isArray(this.activatorNode) ? this.activatorNode : [this.activatorNode]\n        activator.forEach(node => {\n          node.elm &&\n            node.elm.parentNode &&\n            node.elm.parentNode.removeChild(node.elm)\n        })\n      }\n    } catch (e) { console.log(e) }\n  },\n\n  methods: {\n    getScopeIdAttrs () {\n      const scopeId = getObjectValueByPath(this.$vnode, 'context.$options._scopeId')\n\n      return scopeId && {\n        [scopeId]: '',\n      }\n    },\n    initDetach () {\n      if (this._isDestroyed ||\n        !this.$refs.content ||\n        this.hasDetached ||\n        // Leave menu in place if attached\n        // and dev has not changed target\n        this.attach === '' || // If used as a boolean prop (<v-menu attach>)\n        this.attach === true || // If bound to a boolean (<v-menu :attach=\"true\">)\n        this.attach === 'attach' // If bound as boolean prop in pug (v-menu(attach))\n      ) return\n\n      let target\n      if (this.attach === false) {\n        // Default, detach to app\n        target = document.querySelector('[data-app]')\n      } else if (typeof this.attach === 'string') {\n        // CSS selector\n        target = document.querySelector(this.attach)\n      } else {\n        // DOM Element\n        target = this.attach\n      }\n\n      if (!target) {\n        consoleWarn(`Unable to locate target ${this.attach || '[data-app]'}`, this)\n        return\n      }\n\n      target.appendChild(this.$refs.content)\n\n      this.hasDetached = true\n    },\n  },\n})\n","// Styles\nimport './VCounter.sass'\n\n// Mixins\nimport Themeable, { functionalThemeClasses } from '../../mixins/themeable'\n\n// Types\nimport { VNode } from 'vue'\nimport mixins from '../../util/mixins'\n\n/* @vue/component */\nexport default mixins(Themeable).extend({\n  name: 'v-counter',\n\n  functional: true,\n\n  props: {\n    value: {\n      type: [Number, String],\n      default: '',\n    },\n    max: [Number, String],\n  },\n\n  render (h, ctx): VNode {\n    const { props } = ctx\n    const max = parseInt(props.max, 10)\n    const value = parseInt(props.value, 10)\n    const content = max ? `${value} / ${max}` : String(props.value)\n    const isGreater = max && (value > max)\n\n    return h('div', {\n      staticClass: 'v-counter',\n      class: {\n        'error--text': isGreater,\n        ...functionalThemeClasses(ctx),\n      },\n    }, content)\n  },\n})\n","import VCounter from './VCounter'\n\nexport { VCounter }\nexport default VCounter\n","// Directives\nimport Intersect from '../../directives/intersect'\n\n// Utilities\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport Vue from 'vue'\n\nexport default function intersectable (options: { onVisible: string[] }) {\n  if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {\n    // do nothing because intersection observer is not available\n    return Vue.extend({ name: 'intersectable' })\n  }\n\n  return Vue.extend({\n    name: 'intersectable',\n\n    mounted () {\n      Intersect.inserted(this.$el as HTMLElement, {\n        name: 'intersect',\n        value: this.onObserve,\n      })\n    },\n\n    destroyed () {\n      Intersect.unbind(this.$el as HTMLElement)\n    },\n\n    methods: {\n      onObserve (entries: IntersectionObserverEntry[], observer: IntersectionObserver, isIntersecting: boolean) {\n        if (!isIntersecting) return\n\n        for (let i = 0, length = options.onVisible.length; i < length; i++) {\n          const callback = (this as any)[options.onVisible[i]]\n\n          if (typeof callback === 'function') {\n            callback()\n            continue\n          }\n\n          consoleWarn(options.onVisible[i] + ' method is not available on the instance but referenced in intersectable mixin options')\n        }\n      },\n    },\n  })\n}\n","// Styles\nimport './VTextField.sass'\n\n// Extensions\nimport VInput from '../VInput'\n\n// Components\nimport VCounter from '../VCounter'\nimport VLabel from '../VLabel'\n\n// Mixins\nimport Intersectable from '../../mixins/intersectable'\nimport Loadable from '../../mixins/loadable'\nimport Validatable from '../../mixins/validatable'\n\n// Directives\nimport resize from '../../directives/resize'\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { convertToUnit, keyCodes } from '../../util/helpers'\nimport { breaking, consoleWarn } from '../../util/console'\n\n// Types\nimport mixins from '../../util/mixins'\nimport { VNode, PropType } from 'vue/types'\n\nconst baseMixins = mixins(\n  VInput,\n  Intersectable({\n    onVisible: [\n      'onResize',\n      'tryAutofocus',\n    ],\n  }),\n  Loadable,\n)\ninterface options extends InstanceType<typeof baseMixins> {\n  $refs: {\n    label: HTMLElement\n    input: HTMLInputElement\n    'prepend-inner': HTMLElement\n    prefix: HTMLElement\n    suffix: HTMLElement\n  }\n}\n\nconst dirtyTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-text-field',\n\n  directives: {\n    resize,\n    ripple,\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    appendOuterIcon: String,\n    autofocus: Boolean,\n    clearable: Boolean,\n    clearIcon: {\n      type: String,\n      default: '$clear',\n    },\n    counter: [Boolean, Number, String],\n    counterValue: Function as PropType<(value: any) => number>,\n    filled: Boolean,\n    flat: Boolean,\n    fullWidth: Boolean,\n    label: String,\n    outlined: Boolean,\n    placeholder: String,\n    prefix: String,\n    prependInnerIcon: String,\n    reverse: Boolean,\n    rounded: Boolean,\n    shaped: Boolean,\n    singleLine: Boolean,\n    solo: Boolean,\n    soloInverted: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text',\n    },\n  },\n\n  data: () => ({\n    badInput: false,\n    labelWidth: 0,\n    prefixWidth: 0,\n    prependWidth: 0,\n    initialValue: null,\n    isBooted: false,\n    isClearing: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-text-field': true,\n        'v-text-field--full-width': this.fullWidth,\n        'v-text-field--prefix': this.prefix,\n        'v-text-field--single-line': this.isSingle,\n        'v-text-field--solo': this.isSolo,\n        'v-text-field--solo-inverted': this.soloInverted,\n        'v-text-field--solo-flat': this.flat,\n        'v-text-field--filled': this.filled,\n        'v-text-field--is-booted': this.isBooted,\n        'v-text-field--enclosed': this.isEnclosed,\n        'v-text-field--reverse': this.reverse,\n        'v-text-field--outlined': this.outlined,\n        'v-text-field--placeholder': this.placeholder,\n        'v-text-field--rounded': this.rounded,\n        'v-text-field--shaped': this.shaped,\n      }\n    },\n    computedColor (): string | undefined {\n      const computedColor = Validatable.options.computed.computedColor.call(this)\n\n      if (!this.soloInverted || !this.isFocused) return computedColor\n\n      return this.color || 'primary'\n    },\n    computedCounterValue (): number {\n      if (typeof this.counterValue === 'function') {\n        return this.counterValue(this.internalValue)\n      }\n      return (this.internalValue || '').toString().length\n    },\n    hasCounter (): boolean {\n      return this.counter !== false && this.counter != null\n    },\n    hasDetails (): boolean {\n      return VInput.options.computed.hasDetails.call(this) || this.hasCounter\n    },\n    internalValue: {\n      get (): any {\n        return this.lazyValue\n      },\n      set (val: any) {\n        this.lazyValue = val\n        this.$emit('input', this.lazyValue)\n      },\n    },\n    isDirty (): boolean {\n      return this.lazyValue?.toString().length > 0 || this.badInput\n    },\n    isEnclosed (): boolean {\n      return (\n        this.filled ||\n        this.isSolo ||\n        this.outlined\n      )\n    },\n    isLabelActive (): boolean {\n      return this.isDirty || dirtyTypes.includes(this.type)\n    },\n    isSingle (): boolean {\n      return (\n        this.isSolo ||\n        this.singleLine ||\n        this.fullWidth ||\n        // https://material.io/components/text-fields/#filled-text-field\n        (this.filled && !this.hasLabel)\n      )\n    },\n    isSolo (): boolean {\n      return this.solo || this.soloInverted\n    },\n    labelPosition (): Record<'left' | 'right', string | number | undefined> {\n      let offset = (this.prefix && !this.labelValue) ? this.prefixWidth : 0\n\n      if (this.labelValue && this.prependWidth) offset -= this.prependWidth\n\n      return (this.$vuetify.rtl === this.reverse) ? {\n        left: offset,\n        right: 'auto',\n      } : {\n        left: 'auto',\n        right: offset,\n      }\n    },\n    showLabel (): boolean {\n      return this.hasLabel && (!this.isSingle || (!this.isLabelActive && !this.placeholder))\n    },\n    labelValue (): boolean {\n      return !this.isSingle &&\n        Boolean(this.isFocused || this.isLabelActive || this.placeholder)\n    },\n  },\n\n  watch: {\n    labelValue: 'setLabelWidth',\n    outlined: 'setLabelWidth',\n    label () {\n      this.$nextTick(this.setLabelWidth)\n    },\n    prefix () {\n      this.$nextTick(this.setPrefixWidth)\n    },\n    isFocused: 'updateValue',\n    value (val) {\n      this.lazyValue = val\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('box')) {\n      breaking('box', 'filled', this)\n    }\n\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('browser-autocomplete')) {\n      breaking('browser-autocomplete', 'autocomplete', this)\n    }\n\n    /* istanbul ignore if */\n    if (this.shaped && !(this.filled || this.outlined || this.isSolo)) {\n      consoleWarn('shaped should be used with either filled or outlined', this)\n    }\n  },\n\n  mounted () {\n    this.autofocus && this.tryAutofocus()\n\n    requestAnimationFrame(() => (this.isBooted = true))\n  },\n\n  methods: {\n    /** @public */\n    focus () {\n      this.onFocus()\n    },\n    /** @public */\n    blur (e?: Event) {\n      // https://github.com/vuetifyjs/vuetify/issues/5913\n      // Safari tab order gets broken if called synchronous\n      window.requestAnimationFrame(() => {\n        this.$refs.input && this.$refs.input.blur()\n      })\n    },\n    clearableCallback () {\n      this.$refs.input && this.$refs.input.focus()\n      this.$nextTick(() => this.internalValue = null)\n    },\n    genAppendSlot () {\n      const slot = []\n\n      if (this.$slots['append-outer']) {\n        slot.push(this.$slots['append-outer'] as VNode[])\n      } else if (this.appendOuterIcon) {\n        slot.push(this.genIcon('appendOuter'))\n      }\n\n      return this.genSlot('append', 'outer', slot)\n    },\n    genPrependInnerSlot () {\n      const slot = []\n\n      if (this.$slots['prepend-inner']) {\n        slot.push(this.$slots['prepend-inner'] as VNode[])\n      } else if (this.prependInnerIcon) {\n        slot.push(this.genIcon('prependInner'))\n      }\n\n      return this.genSlot('prepend', 'inner', slot)\n    },\n    genIconSlot () {\n      const slot = []\n\n      if (this.$slots['append']) {\n        slot.push(this.$slots['append'] as VNode[])\n      } else if (this.appendIcon) {\n        slot.push(this.genIcon('append'))\n      }\n\n      return this.genSlot('append', 'inner', slot)\n    },\n    genInputSlot () {\n      const input = VInput.options.methods.genInputSlot.call(this)\n\n      const prepend = this.genPrependInnerSlot()\n\n      if (prepend) {\n        input.children = input.children || []\n        input.children.unshift(prepend)\n      }\n\n      return input\n    },\n    genClearIcon () {\n      if (!this.clearable) return null\n\n      const data = this.isDirty ? undefined : { attrs: { disabled: true } }\n\n      return this.genSlot('append', 'inner', [\n        this.genIcon('clear', this.clearableCallback, data),\n      ])\n    },\n    genCounter () {\n      if (!this.hasCounter) return null\n\n      const max = this.counter === true ? this.attrs$.maxlength : this.counter\n\n      return this.$createElement(VCounter, {\n        props: {\n          dark: this.dark,\n          light: this.light,\n          max,\n          value: this.computedCounterValue,\n        },\n      })\n    },\n    genControl () {\n      return VInput.options.methods.genControl.call(this)\n    },\n    genDefaultSlot () {\n      return [\n        this.genFieldset(),\n        this.genTextFieldSlot(),\n        this.genClearIcon(),\n        this.genIconSlot(),\n        this.genProgress(),\n      ]\n    },\n    genFieldset () {\n      if (!this.outlined) return null\n\n      return this.$createElement('fieldset', {\n        attrs: {\n          'aria-hidden': true,\n        },\n      }, [this.genLegend()])\n    },\n    genLabel () {\n      if (!this.showLabel) return null\n\n      const data = {\n        props: {\n          absolute: true,\n          color: this.validationState,\n          dark: this.dark,\n          disabled: this.isDisabled,\n          focused: !this.isSingle && (this.isFocused || !!this.validationState),\n          for: this.computedId,\n          left: this.labelPosition.left,\n          light: this.light,\n          right: this.labelPosition.right,\n          value: this.labelValue,\n        },\n      }\n\n      return this.$createElement(VLabel, data, this.$slots.label || this.label)\n    },\n    genLegend () {\n      const width = !this.singleLine && (this.labelValue || this.isDirty) ? this.labelWidth : 0\n      const span = this.$createElement('span', {\n        domProps: { innerHTML: '&#8203;' },\n      })\n\n      return this.$createElement('legend', {\n        style: {\n          width: !this.isSingle ? convertToUnit(width) : undefined,\n        },\n      }, [span])\n    },\n    genInput () {\n      const listeners = Object.assign({}, this.listeners$)\n      delete listeners['change'] // Change should not be bound externally\n\n      return this.$createElement('input', {\n        style: {},\n        domProps: {\n          value: (this.type === 'number' && Object.is(this.lazyValue, -0)) ? '-0' : this.lazyValue,\n        },\n        attrs: {\n          ...this.attrs$,\n          autofocus: this.autofocus,\n          disabled: this.isDisabled,\n          id: this.computedId,\n          placeholder: this.placeholder,\n          readonly: this.isReadonly,\n          type: this.type,\n        },\n        on: Object.assign(listeners, {\n          blur: this.onBlur,\n          input: this.onInput,\n          focus: this.onFocus,\n          keydown: this.onKeyDown,\n        }),\n        ref: 'input',\n        directives: [{\n          name: 'resize',\n          modifiers: { quiet: true },\n          value: this.onResize,\n        }],\n      })\n    },\n    genMessages () {\n      if (!this.showDetails) return null\n\n      const messagesNode = VInput.options.methods.genMessages.call(this)\n      const counterNode = this.genCounter()\n\n      return this.$createElement('div', {\n        staticClass: 'v-text-field__details',\n      }, [\n        messagesNode,\n        counterNode,\n      ])\n    },\n    genTextFieldSlot () {\n      return this.$createElement('div', {\n        staticClass: 'v-text-field__slot',\n      }, [\n        this.genLabel(),\n        this.prefix ? this.genAffix('prefix') : null,\n        this.genInput(),\n        this.suffix ? this.genAffix('suffix') : null,\n      ])\n    },\n    genAffix (type: 'prefix' | 'suffix') {\n      return this.$createElement('div', {\n        class: `v-text-field__${type}`,\n        ref: type,\n      }, this[type])\n    },\n    onBlur (e?: Event) {\n      this.isFocused = false\n      e && this.$nextTick(() => this.$emit('blur', e))\n    },\n    onClick () {\n      if (this.isFocused || this.isDisabled || !this.$refs.input) return\n\n      this.$refs.input.focus()\n    },\n    onFocus (e?: Event) {\n      if (!this.$refs.input) return\n\n      if (document.activeElement !== this.$refs.input) {\n        return this.$refs.input.focus()\n      }\n\n      if (!this.isFocused) {\n        this.isFocused = true\n        e && this.$emit('focus', e)\n      }\n    },\n    onInput (e: Event) {\n      const target = e.target as HTMLInputElement\n      this.internalValue = target.value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      if (e.keyCode === keyCodes.enter) this.$emit('change', this.internalValue)\n\n      this.$emit('keydown', e)\n    },\n    onMouseDown (e: Event) {\n      // Prevent input from being blurred\n      if (e.target !== this.$refs.input) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n\n      VInput.options.methods.onMouseDown.call(this, e)\n    },\n    onMouseUp (e: Event) {\n      if (this.hasMouseDown) this.focus()\n\n      VInput.options.methods.onMouseUp.call(this, e)\n    },\n    setLabelWidth () {\n      if (!this.outlined) return\n\n      this.labelWidth = this.$refs.label\n        ? Math.min(this.$refs.label.scrollWidth * 0.75 + 6, (this.$el as HTMLElement).offsetWidth - 24)\n        : 0\n    },\n    setPrefixWidth () {\n      if (!this.$refs.prefix) return\n\n      this.prefixWidth = this.$refs.prefix.offsetWidth\n    },\n    setPrependWidth () {\n      if (!this.outlined || !this.$refs['prepend-inner']) return\n\n      this.prependWidth = this.$refs['prepend-inner'].offsetWidth\n    },\n    tryAutofocus () {\n      if (\n        !this.autofocus ||\n        typeof document === 'undefined' ||\n        !this.$refs.input ||\n        document.activeElement === this.$refs.input\n      ) return false\n\n      this.$refs.input.focus()\n\n      return true\n    },\n    updateValue (val: boolean) {\n      // Sets validationState from validatable\n      this.hasColor = val\n\n      if (val) {\n        this.initialValue = this.lazyValue\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue)\n      }\n    },\n    onResize () {\n      this.setLabelWidth()\n      this.setPrefixWidth()\n      this.setPrependWidth()\n    },\n  },\n})\n","// Styles\nimport './VLabel.sass'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport Themeable, { functionalThemeClasses } from '../../mixins/themeable'\n\n// Types\nimport { VNode } from 'vue'\nimport mixins from '../../util/mixins'\n\n// Helpers\nimport { convertToUnit } from '../../util/helpers'\n\n/* @vue/component */\nexport default mixins(Themeable).extend({\n  name: 'v-label',\n\n  functional: true,\n\n  props: {\n    absolute: Boolean,\n    color: {\n      type: String,\n      default: 'primary',\n    },\n    disabled: Boolean,\n    focused: Boolean,\n    for: String,\n    left: {\n      type: [Number, String],\n      default: 0,\n    },\n    right: {\n      type: [Number, String],\n      default: 'auto',\n    },\n    value: Boolean,\n  },\n\n  render (h, ctx): VNode {\n    const { children, listeners, props } = ctx\n    const data = {\n      staticClass: 'v-label',\n      class: {\n        'v-label--active': props.value,\n        'v-label--is-disabled': props.disabled,\n        ...functionalThemeClasses(ctx),\n      },\n      attrs: {\n        for: props.for,\n        'aria-hidden': !props.for,\n      },\n      on: listeners,\n      style: {\n        left: convertToUnit(props.left),\n        right: convertToUnit(props.right),\n        position: props.absolute ? 'absolute' : 'relative',\n      },\n      ref: 'label',\n    }\n\n    return h('label', Colorable.options.methods.setTextColor(props.focused && props.color, data), children)\n  },\n})\n","import VLabel from './VLabel'\n\nexport { VLabel }\nexport default VLabel\n","// Styles\nimport './VMessages.sass'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport Themeable from '../../mixins/themeable'\n\n// Types\nimport { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\nimport mixins from '../../util/mixins'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\n\n/* @vue/component */\nexport default mixins(Colorable, Themeable).extend({\n  name: 'v-messages',\n\n  props: {\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n  },\n\n  methods: {\n    genChildren () {\n      return this.$createElement('transition-group', {\n        staticClass: 'v-messages__wrapper',\n        attrs: {\n          name: 'message-transition',\n          tag: 'div',\n        },\n      }, this.value.map(this.genMessage))\n    },\n    genMessage (message: string, key: number) {\n      return this.$createElement('div', {\n        staticClass: 'v-messages__message',\n        key,\n      }, getSlot(this, 'default', { message, key }) || [message])\n    },\n  },\n\n  render (h): VNode {\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-messages',\n      class: this.themeClasses,\n    }), [this.genChildren()])\n  },\n})\n","import VMessages from './VMessages'\n\nexport { VMessages }\nexport default VMessages\n","// Styles\nimport './VInput.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport VLabel from '../VLabel'\nimport VMessages from '../VMessages'\n\n// Mixins\nimport BindsAttrs from '../../mixins/binds-attrs'\nimport Validatable from '../../mixins/validatable'\n\n// Utilities\nimport {\n  convertToUnit,\n  getSlot,\n  kebabCase,\n} from '../../util/helpers'\nimport mergeData from '../../util/mergeData'\n\n// Types\nimport { VNode, VNodeData, PropType } from 'vue'\nimport mixins from '../../util/mixins'\nimport { InputValidationRule } from 'vuetify/types'\n\nconst baseMixins = mixins(\n  BindsAttrs,\n  Validatable,\n)\n\ninterface options extends InstanceType<typeof baseMixins> {\n  /* eslint-disable-next-line camelcase */\n  $_modelEvent: string\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-input',\n\n  inheritAttrs: false,\n\n  props: {\n    appendIcon: String,\n    backgroundColor: {\n      type: String,\n      default: '',\n    },\n    dense: Boolean,\n    height: [Number, String],\n    hideDetails: [Boolean, String] as PropType<boolean | 'auto'>,\n    hint: String,\n    id: String,\n    label: String,\n    loading: Boolean,\n    persistentHint: Boolean,\n    prependIcon: String,\n    value: null as any as PropType<any>,\n  },\n\n  data () {\n    return {\n      lazyValue: this.value,\n      hasMouseDown: false,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-input--has-state': this.hasState,\n        'v-input--hide-details': !this.showDetails,\n        'v-input--is-label-active': this.isLabelActive,\n        'v-input--is-dirty': this.isDirty,\n        'v-input--is-disabled': this.isDisabled,\n        'v-input--is-focused': this.isFocused,\n        // <v-switch loading>.loading === '' so we can't just cast to boolean\n        'v-input--is-loading': this.loading !== false && this.loading != null,\n        'v-input--is-readonly': this.isReadonly,\n        'v-input--dense': this.dense,\n        ...this.themeClasses,\n      }\n    },\n    computedId (): string {\n      return this.id || `input-${this._uid}`\n    },\n    hasDetails (): boolean {\n      return this.messagesToDisplay.length > 0\n    },\n    hasHint (): boolean {\n      return !this.hasMessages &&\n        !!this.hint &&\n        (this.persistentHint || this.isFocused)\n    },\n    hasLabel (): boolean {\n      return !!(this.$slots.label || this.label)\n    },\n    // Proxy for `lazyValue`\n    // This allows an input\n    // to function without\n    // a provided model\n    internalValue: {\n      get (): any {\n        return this.lazyValue\n      },\n      set (val: any) {\n        this.lazyValue = val\n        this.$emit(this.$_modelEvent, val)\n      },\n    },\n    isDirty (): boolean {\n      return !!this.lazyValue\n    },\n    isLabelActive (): boolean {\n      return this.isDirty\n    },\n    messagesToDisplay (): string[] {\n      if (this.hasHint) return [this.hint]\n\n      if (!this.hasMessages) return []\n\n      return this.validations.map((validation: string | InputValidationRule) => {\n        if (typeof validation === 'string') return validation\n\n        const validationResult = validation(this.internalValue)\n\n        return typeof validationResult === 'string' ? validationResult : ''\n      }).filter(message => message !== '')\n    },\n    showDetails (): boolean {\n      return this.hideDetails === false || (this.hideDetails === 'auto' && this.hasDetails)\n    },\n  },\n\n  watch: {\n    value (val) {\n      this.lazyValue = val\n    },\n  },\n\n  beforeCreate () {\n    // v-radio-group needs to emit a different event\n    // https://github.com/vuetifyjs/vuetify/issues/4752\n    this.$_modelEvent = (this.$options.model && this.$options.model.event) || 'input'\n  },\n\n  methods: {\n    genContent () {\n      return [\n        this.genPrependSlot(),\n        this.genControl(),\n        this.genAppendSlot(),\n      ]\n    },\n    genControl () {\n      return this.$createElement('div', {\n        staticClass: 'v-input__control',\n      }, [\n        this.genInputSlot(),\n        this.genMessages(),\n      ])\n    },\n    genDefaultSlot () {\n      return [\n        this.genLabel(),\n        this.$slots.default,\n      ]\n    },\n    genIcon (\n      type: string,\n      cb?: (e: Event) => void,\n      extraData: VNodeData = {}\n    ) {\n      const icon = (this as any)[`${type}Icon`]\n      const eventName = `click:${kebabCase(type)}`\n      const hasListener = !!(this.listeners$[eventName] || cb)\n\n      const data = mergeData({\n        attrs: {\n          'aria-label': hasListener ? kebabCase(type).split('-')[0] + ' icon' : undefined,\n          color: this.validationState,\n          dark: this.dark,\n          disabled: this.isDisabled,\n          light: this.light,\n        },\n        on: !hasListener\n          ? undefined\n          : {\n            click: (e: Event) => {\n              e.preventDefault()\n              e.stopPropagation()\n\n              this.$emit(eventName, e)\n              cb && cb(e)\n            },\n            // Container has g event that will\n            // trigger menu open if enclosed\n            mouseup: (e: Event) => {\n              e.preventDefault()\n              e.stopPropagation()\n            },\n          },\n      }, extraData)\n\n      return this.$createElement('div', {\n        staticClass: `v-input__icon`,\n        class: type ? `v-input__icon--${kebabCase(type)}` : undefined,\n      }, [\n        this.$createElement(\n          VIcon,\n          data,\n          icon\n        ),\n      ])\n    },\n    genInputSlot () {\n      return this.$createElement('div', this.setBackgroundColor(this.backgroundColor, {\n        staticClass: 'v-input__slot',\n        style: { height: convertToUnit(this.height) },\n        on: {\n          click: this.onClick,\n          mousedown: this.onMouseDown,\n          mouseup: this.onMouseUp,\n        },\n        ref: 'input-slot',\n      }), [this.genDefaultSlot()])\n    },\n    genLabel () {\n      if (!this.hasLabel) return null\n\n      return this.$createElement(VLabel, {\n        props: {\n          color: this.validationState,\n          dark: this.dark,\n          disabled: this.isDisabled,\n          focused: this.hasState,\n          for: this.computedId,\n          light: this.light,\n        },\n      }, this.$slots.label || this.label)\n    },\n    genMessages () {\n      if (!this.showDetails) return null\n\n      return this.$createElement(VMessages, {\n        props: {\n          color: this.hasHint ? '' : this.validationState,\n          dark: this.dark,\n          light: this.light,\n          value: this.messagesToDisplay,\n        },\n        attrs: {\n          role: this.hasMessages ? 'alert' : null,\n        },\n        scopedSlots: {\n          default: props => getSlot(this, 'message', props),\n        },\n      })\n    },\n    genSlot (\n      type: string,\n      location: string,\n      slot: (VNode | VNode[])[]\n    ) {\n      if (!slot.length) return null\n\n      const ref = `${type}-${location}`\n\n      return this.$createElement('div', {\n        staticClass: `v-input__${ref}`,\n        ref,\n      }, slot)\n    },\n    genPrependSlot () {\n      const slot = []\n\n      if (this.$slots.prepend) {\n        slot.push(this.$slots.prepend)\n      } else if (this.prependIcon) {\n        slot.push(this.genIcon('prepend'))\n      }\n\n      return this.genSlot('prepend', 'outer', slot)\n    },\n    genAppendSlot () {\n      const slot = []\n\n      // Append icon for text field was really\n      // an appended inner icon, v-text-field\n      // will overwrite this method in order to obtain\n      // backwards compat\n      if (this.$slots.append) {\n        slot.push(this.$slots.append)\n      } else if (this.appendIcon) {\n        slot.push(this.genIcon('append'))\n      }\n\n      return this.genSlot('append', 'outer', slot)\n    },\n    onClick (e: Event) {\n      this.$emit('click', e)\n    },\n    onMouseDown (e: Event) {\n      this.hasMouseDown = true\n      this.$emit('mousedown', e)\n    },\n    onMouseUp (e: Event) {\n      this.hasMouseDown = false\n      this.$emit('mouseup', e)\n    },\n  },\n\n  render (h): VNode {\n    return h('div', this.setTextColor(this.validationState, {\n      staticClass: 'v-input',\n      class: this.classes,\n    }), this.genContent())\n  },\n})\n","import VInput from './VInput'\n\nexport { VInput }\nexport default VInput\n","import Vue from 'vue'\n\n/* @vue/component */\nexport default Vue.extend({\n  name: 'returnable',\n\n  props: {\n    returnValue: null as any,\n  },\n\n  data: () => ({\n    isActive: false,\n    originalValue: null as any,\n  }),\n\n  watch: {\n    isActive (val) {\n      if (val) {\n        this.originalValue = this.returnValue\n      } else {\n        this.$emit('update:return-value', this.originalValue)\n      }\n    },\n  },\n\n  methods: {\n    save (value: any) {\n      this.originalValue = value\n      setTimeout(() => {\n        this.isActive = false\n      })\n    },\n  },\n})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"text-center\"},[_c('v-overlay',[_c('v-progress-circular',{attrs:{\"indeterminate\":\"\",\"size\":\"64\"}})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./LoaderSpin.vue?vue&type=template&id=32998811&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VOverlay } from 'vuetify/lib/components/VOverlay';\nimport { VProgressCircular } from 'vuetify/lib/components/VProgressCircular';\ninstallComponents(component, {VOverlay,VProgressCircular})\n"],"sourceRoot":""}